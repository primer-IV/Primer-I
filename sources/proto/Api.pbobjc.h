// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ITMActivateRequest;
@class ITMActivateRequest_App;
@class ITMActivateResponse;
@class ITMBroadcastDomain;
@class ITMBroadcastDomainsChangedNotification;
@class ITMCodePointsPerCell;
@class ITMColorPresetRequest;
@class ITMColorPresetRequest_GetPreset;
@class ITMColorPresetRequest_ListPresets;
@class ITMColorPresetResponse;
@class ITMColorPresetResponse_GetPreset;
@class ITMColorPresetResponse_GetPreset_ColorSetting;
@class ITMColorPresetResponse_ListPresets;
@class ITMCoord;
@class ITMCoordRange;
@class ITMCreateTabRequest;
@class ITMCreateTabResponse;
@class ITMCustomEscapeSequenceNotification;
@class ITMFocusChangedNotification;
@class ITMFocusChangedNotification_Window;
@class ITMFocusRequest;
@class ITMFocusResponse;
@class ITMFrame;
@class ITMGetBroadcastDomainsRequest;
@class ITMGetBroadcastDomainsResponse;
@class ITMGetBufferRequest;
@class ITMGetBufferResponse;
@class ITMGetProfilePropertyRequest;
@class ITMGetProfilePropertyResponse;
@class ITMGetPromptRequest;
@class ITMGetPromptResponse;
@class ITMGetPropertyRequest;
@class ITMGetPropertyResponse;
@class ITMInjectRequest;
@class ITMInjectResponse;
@class ITMKeystrokeMonitorRequest;
@class ITMKeystrokeNotification;
@class ITMKeystrokePattern;
@class ITMLayoutChangedNotification;
@class ITMLineContents;
@class ITMLineRange;
@class ITMListProfilesRequest;
@class ITMListProfilesResponse;
@class ITMListProfilesResponse_Profile;
@class ITMListSessionsRequest;
@class ITMListSessionsResponse;
@class ITMListSessionsResponse_Tab;
@class ITMListSessionsResponse_Window;
@class ITMLocationChangeNotification;
@class ITMMenuItemRequest;
@class ITMMenuItemResponse;
@class ITMNewSessionNotification;
@class ITMNotification;
@class ITMNotificationRequest;
@class ITMNotificationResponse;
@class ITMPoint;
@class ITMPreferencesRequest;
@class ITMPreferencesRequest_Request;
@class ITMPreferencesRequest_Request_GetPreference;
@class ITMPreferencesRequest_Request_SetDefaultProfile;
@class ITMPreferencesRequest_Request_SetPreference;
@class ITMPreferencesResponse;
@class ITMPreferencesResponse_Result;
@class ITMPreferencesResponse_Result_GetPreferenceResult;
@class ITMPreferencesResponse_Result_SetDefaultProfileResult;
@class ITMPreferencesResponse_Result_SetPreferenceResult;
@class ITMPreferencesResponse_Result_UnrecognizedResult;
@class ITMProfileChangeRequest;
@class ITMProfileChangedNotification;
@class ITMProfileProperty;
@class ITMPromptNotification;
@class ITMRPCRegistrationRequest;
@class ITMRPCRegistrationRequest_RPCArgument;
@class ITMRPCRegistrationRequest_RPCArgumentSignature;
@class ITMRPCRegistrationRequest_SessionTitleAttributes;
@class ITMRPCRegistrationRequest_StatusBarComponentAttributes;
@class ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob;
@class ITMRange;
@class ITMRegisterToolRequest;
@class ITMRegisterToolResponse;
@class ITMReorderTabsRequest;
@class ITMReorderTabsRequest_Assignment;
@class ITMReorderTabsResponse;
@class ITMRestartSessionRequest;
@class ITMRestartSessionResponse;
@class ITMSavedArrangementRequest;
@class ITMSavedArrangementResponse;
@class ITMScreenUpdateNotification;
@class ITMSelection;
@class ITMSelectionRequest;
@class ITMSelectionRequest_GetSelectionRequest;
@class ITMSelectionRequest_SetSelectionRequest;
@class ITMSelectionResponse;
@class ITMSelectionResponse_GetSelectionResponse;
@class ITMSelectionResponse_SetSelectionResponse;
@class ITMSendTextRequest;
@class ITMSendTextResponse;
@class ITMServerOriginatedRPC;
@class ITMServerOriginatedRPCNotification;
@class ITMServerOriginatedRPCResultRequest;
@class ITMServerOriginatedRPCResultResponse;
@class ITMServerOriginatedRPC_RPCArgument;
@class ITMSessionSummary;
@class ITMSetBroadcastDomainsRequest;
@class ITMSetBroadcastDomainsResponse;
@class ITMSetProfilePropertyRequest;
@class ITMSetProfilePropertyRequest_GuidList;
@class ITMSetProfilePropertyResponse;
@class ITMSetPropertyRequest;
@class ITMSetPropertyResponse;
@class ITMSetTabLayoutRequest;
@class ITMSetTabLayoutResponse;
@class ITMSize;
@class ITMSplitPaneRequest;
@class ITMSplitPaneResponse;
@class ITMSplitTreeNode;
@class ITMSplitTreeNode_SplitTreeLink;
@class ITMStatusBarComponentRequest;
@class ITMStatusBarComponentRequest_OpenPopover;
@class ITMStatusBarComponentResponse;
@class ITMSubSelection;
@class ITMTerminateSessionNotification;
@class ITMTmuxRequest;
@class ITMTmuxRequest_CreateWindow;
@class ITMTmuxRequest_ListConnections;
@class ITMTmuxRequest_SendCommand;
@class ITMTmuxRequest_SetWindowVisible;
@class ITMTmuxResponse;
@class ITMTmuxResponse_CreateWindow;
@class ITMTmuxResponse_ListConnections;
@class ITMTmuxResponse_ListConnections_Connection;
@class ITMTmuxResponse_SendCommand;
@class ITMTmuxResponse_SetWindowVisible;
@class ITMTransactionRequest;
@class ITMTransactionResponse;
@class ITMVariableChangedNotification;
@class ITMVariableMonitorRequest;
@class ITMVariableRequest;
@class ITMVariableRequest_Set;
@class ITMVariableResponse;
@class ITMWindowedCoordRange;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ITMSelectionMode

typedef GPB_ENUM(ITMSelectionMode) {
  ITMSelectionMode_Character = 0,
  ITMSelectionMode_Word = 1,
  ITMSelectionMode_Line = 2,
  ITMSelectionMode_Smart = 3,
  ITMSelectionMode_Box = 4,
  ITMSelectionMode_WholeLine = 5,
};

GPBEnumDescriptor *ITMSelectionMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSelectionMode_IsValidValue(int32_t value);

#pragma mark - Enum ITMNotificationType

typedef GPB_ENUM(ITMNotificationType) {
  /** Notifications that use the `session` parameter. */
  ITMNotificationType_NotifyOnKeystroke = 1,
  ITMNotificationType_NotifyOnScreenUpdate = 2,
  ITMNotificationType_NotifyOnPrompt = 3,
  ITMNotificationType_NotifyOnLocationChange = 4,
  ITMNotificationType_NotifyOnCustomEscapeSequence = 5,
  ITMNotificationType_NotifyOnVariableChange = 12,

  /** Notifications that ignore the `session` parameter. */
  ITMNotificationType_NotifyOnNewSession = 6,
  ITMNotificationType_NotifyOnTerminateSession = 7,
  ITMNotificationType_NotifyOnLayoutChange = 8,
  ITMNotificationType_NotifyOnFocusChange = 9,
  ITMNotificationType_NotifyOnServerOriginatedRpc = 10,
  ITMNotificationType_NotifyOnBroadcastChange = 11,
  ITMNotificationType_NotifyOnProfileChange = 13,
};

GPBEnumDescriptor *ITMNotificationType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMNotificationType_IsValidValue(int32_t value);

#pragma mark - Enum ITMModifiers

typedef GPB_ENUM(ITMModifiers) {
  ITMModifiers_Control = 1,
  ITMModifiers_Option = 2,
  ITMModifiers_Command = 3,
  ITMModifiers_Shift = 4,
  ITMModifiers_Function = 5,
  ITMModifiers_Numpad = 6,
};

GPBEnumDescriptor *ITMModifiers_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMModifiers_IsValidValue(int32_t value);

#pragma mark - Enum ITMVariableScope

typedef GPB_ENUM(ITMVariableScope) {
  ITMVariableScope_Session = 1,
  ITMVariableScope_Tab = 2,
  ITMVariableScope_Window = 3,
  ITMVariableScope_App = 4,
};

GPBEnumDescriptor *ITMVariableScope_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMVariableScope_IsValidValue(int32_t value);

#pragma mark - Enum ITMSetBroadcastDomainsResponse_Status

typedef GPB_ENUM(ITMSetBroadcastDomainsResponse_Status) {
  ITMSetBroadcastDomainsResponse_Status_Ok = 0,
  ITMSetBroadcastDomainsResponse_Status_SessionNotFound = 1,
  ITMSetBroadcastDomainsResponse_Status_BroadcastDomainsNotDisjoint = 2,
  ITMSetBroadcastDomainsResponse_Status_SessionsNotInSameWindow = 3,
};

GPBEnumDescriptor *ITMSetBroadcastDomainsResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSetBroadcastDomainsResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMStatusBarComponentResponse_Status

typedef GPB_ENUM(ITMStatusBarComponentResponse_Status) {
  ITMStatusBarComponentResponse_Status_Ok = 0,
  ITMStatusBarComponentResponse_Status_SessionNotFound = 1,
  ITMStatusBarComponentResponse_Status_RequestMalformed = 2,
  ITMStatusBarComponentResponse_Status_InvalidIdentifier = 3,
};

GPBEnumDescriptor *ITMStatusBarComponentResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMStatusBarComponentResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMSelectionResponse_Status

typedef GPB_ENUM(ITMSelectionResponse_Status) {
  ITMSelectionResponse_Status_Ok = 0,
  ITMSelectionResponse_Status_InvalidSession = 1,
  ITMSelectionResponse_Status_InvalidRange = 2,
  ITMSelectionResponse_Status_RequestMalformed = 3,
};

GPBEnumDescriptor *ITMSelectionResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSelectionResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMColorPresetResponse_Status

typedef GPB_ENUM(ITMColorPresetResponse_Status) {
  ITMColorPresetResponse_Status_Ok = 0,
  ITMColorPresetResponse_Status_PresetNotFound = 1,
  ITMColorPresetResponse_Status_RequestMalformed = 2,
};

GPBEnumDescriptor *ITMColorPresetResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMColorPresetResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMPreferencesResponse_Result_SetPreferenceResult_Status

typedef GPB_ENUM(ITMPreferencesResponse_Result_SetPreferenceResult_Status) {
  ITMPreferencesResponse_Result_SetPreferenceResult_Status_Ok = 0,
  ITMPreferencesResponse_Result_SetPreferenceResult_Status_BadJson = 1,

  /** Not legal for a plist */
  ITMPreferencesResponse_Result_SetPreferenceResult_Status_InvalidValue = 2,
};

GPBEnumDescriptor *ITMPreferencesResponse_Result_SetPreferenceResult_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMPreferencesResponse_Result_SetPreferenceResult_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMPreferencesResponse_Result_SetDefaultProfileResult_Status

typedef GPB_ENUM(ITMPreferencesResponse_Result_SetDefaultProfileResult_Status) {
  ITMPreferencesResponse_Result_SetDefaultProfileResult_Status_Ok = 0,
  ITMPreferencesResponse_Result_SetDefaultProfileResult_Status_BadGuid = 1,
};

GPBEnumDescriptor *ITMPreferencesResponse_Result_SetDefaultProfileResult_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMPreferencesResponse_Result_SetDefaultProfileResult_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMReorderTabsResponse_Status

typedef GPB_ENUM(ITMReorderTabsResponse_Status) {
  ITMReorderTabsResponse_Status_Ok = 0,

  /** e.g., duplicate tab id */
  ITMReorderTabsResponse_Status_InvalidAssignment = 1,
  ITMReorderTabsResponse_Status_InvalidWindowId = 2,
  ITMReorderTabsResponse_Status_InvalidTabId = 3,
};

GPBEnumDescriptor *ITMReorderTabsResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMReorderTabsResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMTmuxResponse_Status

typedef GPB_ENUM(ITMTmuxResponse_Status) {
  ITMTmuxResponse_Status_Ok = 0,
  ITMTmuxResponse_Status_InvalidRequest = 1,
  ITMTmuxResponse_Status_InvalidConnectionId = 2,
  ITMTmuxResponse_Status_InvalidWindowId = 3,
};

GPBEnumDescriptor *ITMTmuxResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMTmuxResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMSetTabLayoutResponse_Status

typedef GPB_ENUM(ITMSetTabLayoutResponse_Status) {
  ITMSetTabLayoutResponse_Status_Ok = 0,
  ITMSetTabLayoutResponse_Status_BadTabId = 1,
  ITMSetTabLayoutResponse_Status_WrongTree = 2,
  ITMSetTabLayoutResponse_Status_InvalidSize = 3,
};

GPBEnumDescriptor *ITMSetTabLayoutResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSetTabLayoutResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMMenuItemResponse_Status

typedef GPB_ENUM(ITMMenuItemResponse_Status) {
  ITMMenuItemResponse_Status_Ok = 0,
  ITMMenuItemResponse_Status_BadIdentifier = 1,
  ITMMenuItemResponse_Status_Disabled = 2,
};

GPBEnumDescriptor *ITMMenuItemResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMMenuItemResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMRestartSessionResponse_Status

typedef GPB_ENUM(ITMRestartSessionResponse_Status) {
  ITMRestartSessionResponse_Status_Ok = 0,
  ITMRestartSessionResponse_Status_SessionNotFound = 1,

  /**
   * Some sessions, such as tmux integration sessions, are not restartable.
   * Also, when `only_if_exited` is set in the request and the session is still running then this
   * status will be returned.
   **/
  ITMRestartSessionResponse_Status_SessionNotRestartable = 2,
};

GPBEnumDescriptor *ITMRestartSessionResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMRestartSessionResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMSavedArrangementRequest_Action

typedef GPB_ENUM(ITMSavedArrangementRequest_Action) {
  /** Restore an existing arrangement with the given name */
  ITMSavedArrangementRequest_Action_Restore = 0,

  /** Save windows to a new arrangment with the given name */
  ITMSavedArrangementRequest_Action_Save = 1,
};

GPBEnumDescriptor *ITMSavedArrangementRequest_Action_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSavedArrangementRequest_Action_IsValidValue(int32_t value);

#pragma mark - Enum ITMSavedArrangementResponse_Status

typedef GPB_ENUM(ITMSavedArrangementResponse_Status) {
  ITMSavedArrangementResponse_Status_Ok = 0,

  /** Tried to restore, but name doesn't exist */
  ITMSavedArrangementResponse_Status_ArrangementNotFound = 1,

  /** Bad window ID provided */
  ITMSavedArrangementResponse_Status_WindowNotFound = 2,
  ITMSavedArrangementResponse_Status_RequestMalformed = 3,
};

GPBEnumDescriptor *ITMSavedArrangementResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSavedArrangementResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMVariableResponse_Status

typedef GPB_ENUM(ITMVariableResponse_Status) {
  ITMVariableResponse_Status_Ok = 0,
  ITMVariableResponse_Status_SessionNotFound = 1,

  /** Names you set must begin with "user." */
  ITMVariableResponse_Status_InvalidName = 2,

  /** None of the scope oneof fields was set */
  ITMVariableResponse_Status_MissingScope = 3,
  ITMVariableResponse_Status_TabNotFound = 4,
  ITMVariableResponse_Status_MultiGetDisallowed = 5,
};

GPBEnumDescriptor *ITMVariableResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMVariableResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMActivateResponse_Status

typedef GPB_ENUM(ITMActivateResponse_Status) {
  ITMActivateResponse_Status_Ok = 0,
  ITMActivateResponse_Status_BadIdentifier = 1,
  ITMActivateResponse_Status_InvalidOption = 2,
};

GPBEnumDescriptor *ITMActivateResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMActivateResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMInjectResponse_Status

typedef GPB_ENUM(ITMInjectResponse_Status) {
  ITMInjectResponse_Status_Ok = 0,
  ITMInjectResponse_Status_SessionNotFound = 1,
};

GPBEnumDescriptor *ITMInjectResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMInjectResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMGetPropertyResponse_Status

typedef GPB_ENUM(ITMGetPropertyResponse_Status) {
  ITMGetPropertyResponse_Status_Ok = 0,
  ITMGetPropertyResponse_Status_UnrecognizedName = 1,
  ITMGetPropertyResponse_Status_InvalidTarget = 2,
};

GPBEnumDescriptor *ITMGetPropertyResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMGetPropertyResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMSetPropertyResponse_Status

typedef GPB_ENUM(ITMSetPropertyResponse_Status) {
  ITMSetPropertyResponse_Status_Ok = 0,
  ITMSetPropertyResponse_Status_UnrecognizedName = 1,

  /** e.g., bad JSON value */
  ITMSetPropertyResponse_Status_InvalidValue = 2,

  /** e.g., bogus window_id */
  ITMSetPropertyResponse_Status_InvalidTarget = 3,

  /** Operation can't be performed immediately. Will be tried later. For example, resizing a session during instant replay. */
  ITMSetPropertyResponse_Status_Deferred = 4,

  /** Can't be done. For example, resizing a session in a full-screen window. */
  ITMSetPropertyResponse_Status_Impossible = 5,
};

GPBEnumDescriptor *ITMSetPropertyResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSetPropertyResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMRegisterToolRequest_ToolType

typedef GPB_ENUM(ITMRegisterToolRequest_ToolType) {
  ITMRegisterToolRequest_ToolType_WebViewTool = 1,
};

GPBEnumDescriptor *ITMRegisterToolRequest_ToolType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMRegisterToolRequest_ToolType_IsValidValue(int32_t value);

#pragma mark - Enum ITMRPCRegistrationRequest_Role

typedef GPB_ENUM(ITMRPCRegistrationRequest_Role) {
  ITMRPCRegistrationRequest_Role_Generic = 1,
  ITMRPCRegistrationRequest_Role_SessionTitle = 2,
  ITMRPCRegistrationRequest_Role_StatusBarComponent = 3,
};

GPBEnumDescriptor *ITMRPCRegistrationRequest_Role_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMRPCRegistrationRequest_Role_IsValidValue(int32_t value);

#pragma mark - Enum ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type

typedef GPB_ENUM(ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type) {
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Checkbox = 1,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_String = 2,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_PositiveFloatingPoint = 3,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Color = 4,
};

GPBEnumDescriptor *ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_IsValidValue(int32_t value);

#pragma mark - Enum ITMRegisterToolResponse_Status

typedef GPB_ENUM(ITMRegisterToolResponse_Status) {
  ITMRegisterToolResponse_Status_Ok = 0,
  ITMRegisterToolResponse_Status_RequestMalformed = 1,
  ITMRegisterToolResponse_Status_PermissionDenied = 2,
};

GPBEnumDescriptor *ITMRegisterToolResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMRegisterToolResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMNotificationResponse_Status

typedef GPB_ENUM(ITMNotificationResponse_Status) {
  ITMNotificationResponse_Status_Ok = 0,
  ITMNotificationResponse_Status_SessionNotFound = 1,
  ITMNotificationResponse_Status_RequestMalformed = 2,
  ITMNotificationResponse_Status_NotSubscribed = 3,
  ITMNotificationResponse_Status_AlreadySubscribed = 4,
  ITMNotificationResponse_Status_DuplicateServerOriginatedRpc = 5,
  ITMNotificationResponse_Status_InvalidIdentifier = 6,
};

GPBEnumDescriptor *ITMNotificationResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMNotificationResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMFocusChangedNotification_Window_WindowStatus

typedef GPB_ENUM(ITMFocusChangedNotification_Window_WindowStatus) {
  /** `window_id` became key */
  ITMFocusChangedNotification_Window_WindowStatus_TerminalWindowBecameKey = 0,

  /** `window_id` is not key, but is the current terminal window. Some other non-terminal window is key. */
  ITMFocusChangedNotification_Window_WindowStatus_TerminalWindowIsCurrent = 1,

  /** `window_id` is no longer key. */
  ITMFocusChangedNotification_Window_WindowStatus_TerminalWindowResignedKey = 2,
};

GPBEnumDescriptor *ITMFocusChangedNotification_Window_WindowStatus_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMFocusChangedNotification_Window_WindowStatus_IsValidValue(int32_t value);

#pragma mark - Enum ITMGetBufferResponse_Status

typedef GPB_ENUM(ITMGetBufferResponse_Status) {
  ITMGetBufferResponse_Status_Ok = 0,
  ITMGetBufferResponse_Status_SessionNotFound = 1,
  ITMGetBufferResponse_Status_InvalidLineRange = 2,
  ITMGetBufferResponse_Status_RequestMalformed = 3,
};

GPBEnumDescriptor *ITMGetBufferResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMGetBufferResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMGetPromptResponse_Status

typedef GPB_ENUM(ITMGetPromptResponse_Status) {
  ITMGetPromptResponse_Status_Ok = 0,
  ITMGetPromptResponse_Status_SessionNotFound = 1,
  ITMGetPromptResponse_Status_RequestMalformed = 2,
  ITMGetPromptResponse_Status_PromptUnavailable = 3,
};

GPBEnumDescriptor *ITMGetPromptResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMGetPromptResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMGetProfilePropertyResponse_Status

typedef GPB_ENUM(ITMGetProfilePropertyResponse_Status) {
  ITMGetProfilePropertyResponse_Status_Ok = 0,
  ITMGetProfilePropertyResponse_Status_SessionNotFound = 1,
  ITMGetProfilePropertyResponse_Status_RequestMalformed = 2,
  ITMGetProfilePropertyResponse_Status_Error = 3,
};

GPBEnumDescriptor *ITMGetProfilePropertyResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMGetProfilePropertyResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMSetProfilePropertyResponse_Status

typedef GPB_ENUM(ITMSetProfilePropertyResponse_Status) {
  ITMSetProfilePropertyResponse_Status_Ok = 0,
  ITMSetProfilePropertyResponse_Status_SessionNotFound = 1,
  ITMSetProfilePropertyResponse_Status_RequestMalformed = 2,
  ITMSetProfilePropertyResponse_Status_BadGuid = 3,
};

GPBEnumDescriptor *ITMSetProfilePropertyResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSetProfilePropertyResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMTransactionResponse_Status

typedef GPB_ENUM(ITMTransactionResponse_Status) {
  ITMTransactionResponse_Status_Ok = 0,
  ITMTransactionResponse_Status_NoTransaction = 1,
  ITMTransactionResponse_Status_AlreadyInTransaction = 2,
};

GPBEnumDescriptor *ITMTransactionResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMTransactionResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMLineContents_Continuation

/** How does this line end? */
typedef GPB_ENUM(ITMLineContents_Continuation) {
  /** This line is not wrapped. */
  ITMLineContents_Continuation_ContinuationHardEol = 1,

  /** The next line is a continuation of this line. */
  ITMLineContents_Continuation_ContinuationSoftEol = 2,
};

GPBEnumDescriptor *ITMLineContents_Continuation_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMLineContents_Continuation_IsValidValue(int32_t value);

#pragma mark - Enum ITMSendTextResponse_Status

typedef GPB_ENUM(ITMSendTextResponse_Status) {
  ITMSendTextResponse_Status_Ok = 0,
  ITMSendTextResponse_Status_SessionNotFound = 1,
};

GPBEnumDescriptor *ITMSendTextResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSendTextResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMCreateTabResponse_Status

typedef GPB_ENUM(ITMCreateTabResponse_Status) {
  ITMCreateTabResponse_Status_Ok = 0,
  ITMCreateTabResponse_Status_InvalidProfileName = 1,
  ITMCreateTabResponse_Status_InvalidWindowId = 2,

  /** The tab is still created, just not with the desired index. */
  ITMCreateTabResponse_Status_InvalidTabIndex = 3,

  /** A $VAR$ substitution was not provided by the user. */
  ITMCreateTabResponse_Status_MissingSubstitution = 4,
};

GPBEnumDescriptor *ITMCreateTabResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMCreateTabResponse_Status_IsValidValue(int32_t value);

#pragma mark - Enum ITMSplitPaneRequest_SplitDirection

typedef GPB_ENUM(ITMSplitPaneRequest_SplitDirection) {
  ITMSplitPaneRequest_SplitDirection_Vertical = 0,
  ITMSplitPaneRequest_SplitDirection_Horizontal = 1,
};

GPBEnumDescriptor *ITMSplitPaneRequest_SplitDirection_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSplitPaneRequest_SplitDirection_IsValidValue(int32_t value);

#pragma mark - Enum ITMSplitPaneResponse_Status

typedef GPB_ENUM(ITMSplitPaneResponse_Status) {
  ITMSplitPaneResponse_Status_Ok = 0,
  ITMSplitPaneResponse_Status_SessionNotFound = 1,
  ITMSplitPaneResponse_Status_InvalidProfileName = 2,

  /**
   * This can happen if the session to be split is too small. If splitting multiple sessions and
   * one or more cannot be split, the status will be set to CANNOT_SPLIT, even if some did succeed
   * (in which case there will be one or more session_id's).
   **/
  ITMSplitPaneResponse_Status_CannotSplit = 3,

  /** Couldn't decode JSON */
  ITMSplitPaneResponse_Status_MalformedCustomProfileProperty = 4,
};

GPBEnumDescriptor *ITMSplitPaneResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ITMSplitPaneResponse_Status_IsValidValue(int32_t value);

#pragma mark - ITMApiRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ITMApiRoot : GPBRootObject
@end

#pragma mark - ITMClientOriginatedMessage

typedef GPB_ENUM(ITMClientOriginatedMessage_FieldNumber) {
  ITMClientOriginatedMessage_FieldNumber_Id_p = 1,
  ITMClientOriginatedMessage_FieldNumber_GetBufferRequest = 100,
  ITMClientOriginatedMessage_FieldNumber_GetPromptRequest = 101,
  ITMClientOriginatedMessage_FieldNumber_TransactionRequest = 102,
  ITMClientOriginatedMessage_FieldNumber_NotificationRequest = 103,
  ITMClientOriginatedMessage_FieldNumber_RegisterToolRequest = 104,
  ITMClientOriginatedMessage_FieldNumber_SetProfilePropertyRequest = 105,
  ITMClientOriginatedMessage_FieldNumber_ListSessionsRequest = 106,
  ITMClientOriginatedMessage_FieldNumber_SendTextRequest = 107,
  ITMClientOriginatedMessage_FieldNumber_CreateTabRequest = 108,
  ITMClientOriginatedMessage_FieldNumber_SplitPaneRequest = 109,
  ITMClientOriginatedMessage_FieldNumber_GetProfilePropertyRequest = 110,
  ITMClientOriginatedMessage_FieldNumber_SetPropertyRequest = 111,
  ITMClientOriginatedMessage_FieldNumber_GetPropertyRequest = 112,
  ITMClientOriginatedMessage_FieldNumber_InjectRequest = 113,
  ITMClientOriginatedMessage_FieldNumber_ActivateRequest = 114,
  ITMClientOriginatedMessage_FieldNumber_VariableRequest = 115,
  ITMClientOriginatedMessage_FieldNumber_SavedArrangementRequest = 116,
  ITMClientOriginatedMessage_FieldNumber_FocusRequest = 117,
  ITMClientOriginatedMessage_FieldNumber_ListProfilesRequest = 118,
  ITMClientOriginatedMessage_FieldNumber_ServerOriginatedRpcResultRequest = 119,
  ITMClientOriginatedMessage_FieldNumber_RestartSessionRequest = 120,
  ITMClientOriginatedMessage_FieldNumber_MenuItemRequest = 121,
  ITMClientOriginatedMessage_FieldNumber_SetTabLayoutRequest = 122,
  ITMClientOriginatedMessage_FieldNumber_GetBroadcastDomainsRequest = 123,
  ITMClientOriginatedMessage_FieldNumber_TmuxRequest = 124,
  ITMClientOriginatedMessage_FieldNumber_ReorderTabsRequest = 125,
  ITMClientOriginatedMessage_FieldNumber_PreferencesRequest = 126,
  ITMClientOriginatedMessage_FieldNumber_ColorPresetRequest = 127,
  ITMClientOriginatedMessage_FieldNumber_SelectionRequest = 128,
  ITMClientOriginatedMessage_FieldNumber_StatusBarComponentRequest = 129,
  ITMClientOriginatedMessage_FieldNumber_SetBroadcastDomainsRequest = 130,
};

typedef GPB_ENUM(ITMClientOriginatedMessage_Submessage_OneOfCase) {
  ITMClientOriginatedMessage_Submessage_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMClientOriginatedMessage_Submessage_OneOfCase_GetBufferRequest = 100,
  ITMClientOriginatedMessage_Submessage_OneOfCase_GetPromptRequest = 101,
  ITMClientOriginatedMessage_Submessage_OneOfCase_TransactionRequest = 102,
  ITMClientOriginatedMessage_Submessage_OneOfCase_NotificationRequest = 103,
  ITMClientOriginatedMessage_Submessage_OneOfCase_RegisterToolRequest = 104,
  ITMClientOriginatedMessage_Submessage_OneOfCase_SetProfilePropertyRequest = 105,
  ITMClientOriginatedMessage_Submessage_OneOfCase_ListSessionsRequest = 106,
  ITMClientOriginatedMessage_Submessage_OneOfCase_SendTextRequest = 107,
  ITMClientOriginatedMessage_Submessage_OneOfCase_CreateTabRequest = 108,
  ITMClientOriginatedMessage_Submessage_OneOfCase_SplitPaneRequest = 109,
  ITMClientOriginatedMessage_Submessage_OneOfCase_GetProfilePropertyRequest = 110,
  ITMClientOriginatedMessage_Submessage_OneOfCase_SetPropertyRequest = 111,
  ITMClientOriginatedMessage_Submessage_OneOfCase_GetPropertyRequest = 112,
  ITMClientOriginatedMessage_Submessage_OneOfCase_InjectRequest = 113,
  ITMClientOriginatedMessage_Submessage_OneOfCase_ActivateRequest = 114,
  ITMClientOriginatedMessage_Submessage_OneOfCase_VariableRequest = 115,
  ITMClientOriginatedMessage_Submessage_OneOfCase_SavedArrangementRequest = 116,
  ITMClientOriginatedMessage_Submessage_OneOfCase_FocusRequest = 117,
  ITMClientOriginatedMessage_Submessage_OneOfCase_ListProfilesRequest = 118,
  ITMClientOriginatedMessage_Submessage_OneOfCase_ServerOriginatedRpcResultRequest = 119,
  ITMClientOriginatedMessage_Submessage_OneOfCase_RestartSessionRequest = 120,
  ITMClientOriginatedMessage_Submessage_OneOfCase_MenuItemRequest = 121,
  ITMClientOriginatedMessage_Submessage_OneOfCase_SetTabLayoutRequest = 122,
  ITMClientOriginatedMessage_Submessage_OneOfCase_GetBroadcastDomainsRequest = 123,
  ITMClientOriginatedMessage_Submessage_OneOfCase_TmuxRequest = 124,
  ITMClientOriginatedMessage_Submessage_OneOfCase_ReorderTabsRequest = 125,
  ITMClientOriginatedMessage_Submessage_OneOfCase_PreferencesRequest = 126,
  ITMClientOriginatedMessage_Submessage_OneOfCase_ColorPresetRequest = 127,
  ITMClientOriginatedMessage_Submessage_OneOfCase_SelectionRequest = 128,
  ITMClientOriginatedMessage_Submessage_OneOfCase_StatusBarComponentRequest = 129,
  ITMClientOriginatedMessage_Submessage_OneOfCase_SetBroadcastDomainsRequest = 130,
};

/**
 * All requests are wrapped in this message. This encoded message is the entirety of the payload
 * of messages sent over WebSocket from client to iTerm2.
 **/
@interface ITMClientOriginatedMessage : GPBMessage

@property(nonatomic, readwrite) int64_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
@property(nonatomic, readonly) ITMClientOriginatedMessage_Submessage_OneOfCase submessageOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMGetBufferRequest *getBufferRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMGetPromptRequest *getPromptRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMTransactionRequest *transactionRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMNotificationRequest *notificationRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMRegisterToolRequest *registerToolRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMSetProfilePropertyRequest *setProfilePropertyRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMListSessionsRequest *listSessionsRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMSendTextRequest *sendTextRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMCreateTabRequest *createTabRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMSplitPaneRequest *splitPaneRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMGetProfilePropertyRequest *getProfilePropertyRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMSetPropertyRequest *setPropertyRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMGetPropertyRequest *getPropertyRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMInjectRequest *injectRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMActivateRequest *activateRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMVariableRequest *variableRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMSavedArrangementRequest *savedArrangementRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMFocusRequest *focusRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMListProfilesRequest *listProfilesRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMServerOriginatedRPCResultRequest *serverOriginatedRpcResultRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMRestartSessionRequest *restartSessionRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMMenuItemRequest *menuItemRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMSetTabLayoutRequest *setTabLayoutRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMGetBroadcastDomainsRequest *getBroadcastDomainsRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMTmuxRequest *tmuxRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMReorderTabsRequest *reorderTabsRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMPreferencesRequest *preferencesRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMColorPresetRequest *colorPresetRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMSelectionRequest *selectionRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMStatusBarComponentRequest *statusBarComponentRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMSetBroadcastDomainsRequest *setBroadcastDomainsRequest;

@end

/**
 * Clears whatever value was set for the oneof 'submessage'.
 **/
void ITMClientOriginatedMessage_ClearSubmessageOneOfCase(ITMClientOriginatedMessage *message);

#pragma mark - ITMServerOriginatedMessage

typedef GPB_ENUM(ITMServerOriginatedMessage_FieldNumber) {
  ITMServerOriginatedMessage_FieldNumber_Id_p = 1,
  ITMServerOriginatedMessage_FieldNumber_Error = 2,
  ITMServerOriginatedMessage_FieldNumber_GetBufferResponse = 100,
  ITMServerOriginatedMessage_FieldNumber_GetPromptResponse = 101,
  ITMServerOriginatedMessage_FieldNumber_TransactionResponse = 102,
  ITMServerOriginatedMessage_FieldNumber_NotificationResponse = 103,
  ITMServerOriginatedMessage_FieldNumber_RegisterToolResponse = 104,
  ITMServerOriginatedMessage_FieldNumber_SetProfilePropertyResponse = 105,
  ITMServerOriginatedMessage_FieldNumber_ListSessionsResponse = 106,
  ITMServerOriginatedMessage_FieldNumber_SendTextResponse = 107,
  ITMServerOriginatedMessage_FieldNumber_CreateTabResponse = 108,
  ITMServerOriginatedMessage_FieldNumber_SplitPaneResponse = 109,
  ITMServerOriginatedMessage_FieldNumber_GetProfilePropertyResponse = 110,
  ITMServerOriginatedMessage_FieldNumber_SetPropertyResponse = 111,
  ITMServerOriginatedMessage_FieldNumber_GetPropertyResponse = 112,
  ITMServerOriginatedMessage_FieldNumber_InjectResponse = 113,
  ITMServerOriginatedMessage_FieldNumber_ActivateResponse = 114,
  ITMServerOriginatedMessage_FieldNumber_VariableResponse = 115,
  ITMServerOriginatedMessage_FieldNumber_SavedArrangementResponse = 116,
  ITMServerOriginatedMessage_FieldNumber_FocusResponse = 117,
  ITMServerOriginatedMessage_FieldNumber_ListProfilesResponse = 118,
  ITMServerOriginatedMessage_FieldNumber_ServerOriginatedRpcResultResponse = 119,
  ITMServerOriginatedMessage_FieldNumber_RestartSessionResponse = 120,
  ITMServerOriginatedMessage_FieldNumber_MenuItemResponse = 121,
  ITMServerOriginatedMessage_FieldNumber_SetTabLayoutResponse = 122,
  ITMServerOriginatedMessage_FieldNumber_GetBroadcastDomainsResponse = 123,
  ITMServerOriginatedMessage_FieldNumber_TmuxResponse = 124,
  ITMServerOriginatedMessage_FieldNumber_ReorderTabsResponse = 125,
  ITMServerOriginatedMessage_FieldNumber_PreferencesResponse = 126,
  ITMServerOriginatedMessage_FieldNumber_ColorPresetResponse = 127,
  ITMServerOriginatedMessage_FieldNumber_SelectionResponse = 128,
  ITMServerOriginatedMessage_FieldNumber_StatusBarComponentResponse = 129,
  ITMServerOriginatedMessage_FieldNumber_SetBroadcastDomainsResponse = 130,
  ITMServerOriginatedMessage_FieldNumber_Notification = 1000,
};

typedef GPB_ENUM(ITMServerOriginatedMessage_Submessage_OneOfCase) {
  ITMServerOriginatedMessage_Submessage_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMServerOriginatedMessage_Submessage_OneOfCase_Error = 2,
  ITMServerOriginatedMessage_Submessage_OneOfCase_GetBufferResponse = 100,
  ITMServerOriginatedMessage_Submessage_OneOfCase_GetPromptResponse = 101,
  ITMServerOriginatedMessage_Submessage_OneOfCase_TransactionResponse = 102,
  ITMServerOriginatedMessage_Submessage_OneOfCase_NotificationResponse = 103,
  ITMServerOriginatedMessage_Submessage_OneOfCase_RegisterToolResponse = 104,
  ITMServerOriginatedMessage_Submessage_OneOfCase_SetProfilePropertyResponse = 105,
  ITMServerOriginatedMessage_Submessage_OneOfCase_ListSessionsResponse = 106,
  ITMServerOriginatedMessage_Submessage_OneOfCase_SendTextResponse = 107,
  ITMServerOriginatedMessage_Submessage_OneOfCase_CreateTabResponse = 108,
  ITMServerOriginatedMessage_Submessage_OneOfCase_SplitPaneResponse = 109,
  ITMServerOriginatedMessage_Submessage_OneOfCase_GetProfilePropertyResponse = 110,
  ITMServerOriginatedMessage_Submessage_OneOfCase_SetPropertyResponse = 111,
  ITMServerOriginatedMessage_Submessage_OneOfCase_GetPropertyResponse = 112,
  ITMServerOriginatedMessage_Submessage_OneOfCase_InjectResponse = 113,
  ITMServerOriginatedMessage_Submessage_OneOfCase_ActivateResponse = 114,
  ITMServerOriginatedMessage_Submessage_OneOfCase_VariableResponse = 115,
  ITMServerOriginatedMessage_Submessage_OneOfCase_SavedArrangementResponse = 116,
  ITMServerOriginatedMessage_Submessage_OneOfCase_FocusResponse = 117,
  ITMServerOriginatedMessage_Submessage_OneOfCase_ListProfilesResponse = 118,
  ITMServerOriginatedMessage_Submessage_OneOfCase_ServerOriginatedRpcResultResponse = 119,
  ITMServerOriginatedMessage_Submessage_OneOfCase_RestartSessionResponse = 120,
  ITMServerOriginatedMessage_Submessage_OneOfCase_MenuItemResponse = 121,
  ITMServerOriginatedMessage_Submessage_OneOfCase_SetTabLayoutResponse = 122,
  ITMServerOriginatedMessage_Submessage_OneOfCase_GetBroadcastDomainsResponse = 123,
  ITMServerOriginatedMessage_Submessage_OneOfCase_TmuxResponse = 124,
  ITMServerOriginatedMessage_Submessage_OneOfCase_ReorderTabsResponse = 125,
  ITMServerOriginatedMessage_Submessage_OneOfCase_PreferencesResponse = 126,
  ITMServerOriginatedMessage_Submessage_OneOfCase_ColorPresetResponse = 127,
  ITMServerOriginatedMessage_Submessage_OneOfCase_SelectionResponse = 128,
  ITMServerOriginatedMessage_Submessage_OneOfCase_StatusBarComponentResponse = 129,
  ITMServerOriginatedMessage_Submessage_OneOfCase_SetBroadcastDomainsResponse = 130,
  ITMServerOriginatedMessage_Submessage_OneOfCase_Notification = 1000,
};

/**
 * All responses are wrapped in this message. This encoded message is the entirety of the payload
 * of messages sent over WebSocket from iTerm2 to client.
 **/
@interface ITMServerOriginatedMessage : GPBMessage

@property(nonatomic, readwrite) int64_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
/** Responses to ClientOriginatedMessages of the corresponding type */
@property(nonatomic, readonly) ITMServerOriginatedMessage_Submessage_OneOfCase submessageOneOfCase;

/** Set if request was malformed */
@property(nonatomic, readwrite, copy, null_resettable) NSString *error;

@property(nonatomic, readwrite, strong, null_resettable) ITMGetBufferResponse *getBufferResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMGetPromptResponse *getPromptResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMTransactionResponse *transactionResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMNotificationResponse *notificationResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMRegisterToolResponse *registerToolResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMSetProfilePropertyResponse *setProfilePropertyResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMListSessionsResponse *listSessionsResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMSendTextResponse *sendTextResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMCreateTabResponse *createTabResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMSplitPaneResponse *splitPaneResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMGetProfilePropertyResponse *getProfilePropertyResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMSetPropertyResponse *setPropertyResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMGetPropertyResponse *getPropertyResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMInjectResponse *injectResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMActivateResponse *activateResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMVariableResponse *variableResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMSavedArrangementResponse *savedArrangementResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMFocusResponse *focusResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMListProfilesResponse *listProfilesResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMServerOriginatedRPCResultResponse *serverOriginatedRpcResultResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMRestartSessionResponse *restartSessionResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMMenuItemResponse *menuItemResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMSetTabLayoutResponse *setTabLayoutResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMGetBroadcastDomainsResponse *getBroadcastDomainsResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMTmuxResponse *tmuxResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMReorderTabsResponse *reorderTabsResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMPreferencesResponse *preferencesResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMColorPresetResponse *colorPresetResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMSelectionResponse *selectionResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMStatusBarComponentResponse *statusBarComponentResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMSetBroadcastDomainsResponse *setBroadcastDomainsResponse;

/** This is the only response that is sent spontaneously. The 'id' field will not be set. */
@property(nonatomic, readwrite, strong, null_resettable) ITMNotification *notification;

@end

/**
 * Clears whatever value was set for the oneof 'submessage'.
 **/
void ITMServerOriginatedMessage_ClearSubmessageOneOfCase(ITMServerOriginatedMessage *message);

#pragma mark - ITMSetBroadcastDomainsRequest

typedef GPB_ENUM(ITMSetBroadcastDomainsRequest_FieldNumber) {
  ITMSetBroadcastDomainsRequest_FieldNumber_BroadcastDomainsArray = 1,
};

@interface ITMSetBroadcastDomainsRequest : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMBroadcastDomain*> *broadcastDomainsArray;
/** The number of items in @c broadcastDomainsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger broadcastDomainsArray_Count;

@end

#pragma mark - ITMSetBroadcastDomainsResponse

typedef GPB_ENUM(ITMSetBroadcastDomainsResponse_FieldNumber) {
  ITMSetBroadcastDomainsResponse_FieldNumber_Status = 1,
};

@interface ITMSetBroadcastDomainsResponse : GPBMessage

@property(nonatomic, readwrite) ITMSetBroadcastDomainsResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMStatusBarComponentRequest

typedef GPB_ENUM(ITMStatusBarComponentRequest_FieldNumber) {
  ITMStatusBarComponentRequest_FieldNumber_OpenPopover = 1,
  ITMStatusBarComponentRequest_FieldNumber_Identifier = 2,
};

typedef GPB_ENUM(ITMStatusBarComponentRequest_Request_OneOfCase) {
  ITMStatusBarComponentRequest_Request_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMStatusBarComponentRequest_Request_OneOfCase_OpenPopover = 1,
};

@interface ITMStatusBarComponentRequest : GPBMessage

@property(nonatomic, readonly) ITMStatusBarComponentRequest_Request_OneOfCase requestOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMStatusBarComponentRequest_OpenPopover *openPopover;

/** ID of statusbar component */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;
/** Test to see if @c identifier has been set. */
@property(nonatomic, readwrite) BOOL hasIdentifier;

@end

/**
 * Clears whatever value was set for the oneof 'request'.
 **/
void ITMStatusBarComponentRequest_ClearRequestOneOfCase(ITMStatusBarComponentRequest *message);

#pragma mark - ITMStatusBarComponentRequest_OpenPopover

typedef GPB_ENUM(ITMStatusBarComponentRequest_OpenPopover_FieldNumber) {
  ITMStatusBarComponentRequest_OpenPopover_FieldNumber_SessionId = 1,
  ITMStatusBarComponentRequest_OpenPopover_FieldNumber_Html = 2,
  ITMStatusBarComponentRequest_OpenPopover_FieldNumber_Size = 3,
};

@interface ITMStatusBarComponentRequest_OpenPopover : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;
/** Test to see if @c sessionId has been set. */
@property(nonatomic, readwrite) BOOL hasSessionId;

/** HTML to show in a popover that opens from the component. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *html;
/** Test to see if @c html has been set. */
@property(nonatomic, readwrite) BOOL hasHtml;

/** Size in points of the content area of the popover. */
@property(nonatomic, readwrite, strong, null_resettable) ITMSize *size;
/** Test to see if @c size has been set. */
@property(nonatomic, readwrite) BOOL hasSize;

@end

#pragma mark - ITMStatusBarComponentResponse

typedef GPB_ENUM(ITMStatusBarComponentResponse_FieldNumber) {
  ITMStatusBarComponentResponse_FieldNumber_Status = 1,
};

@interface ITMStatusBarComponentResponse : GPBMessage

@property(nonatomic, readwrite) ITMStatusBarComponentResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMWindowedCoordRange

typedef GPB_ENUM(ITMWindowedCoordRange_FieldNumber) {
  ITMWindowedCoordRange_FieldNumber_CoordRange = 1,
  ITMWindowedCoordRange_FieldNumber_Columns = 2,
};

@interface ITMWindowedCoordRange : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ITMCoordRange *coordRange;
/** Test to see if @c coordRange has been set. */
@property(nonatomic, readwrite) BOOL hasCoordRange;

@property(nonatomic, readwrite, strong, null_resettable) ITMRange *columns;
/** Test to see if @c columns has been set. */
@property(nonatomic, readwrite) BOOL hasColumns;

@end

#pragma mark - ITMSubSelection

typedef GPB_ENUM(ITMSubSelection_FieldNumber) {
  ITMSubSelection_FieldNumber_WindowedCoordRange = 1,
  ITMSubSelection_FieldNumber_SelectionMode = 2,
  ITMSubSelection_FieldNumber_Connected = 3,
};

@interface ITMSubSelection : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ITMWindowedCoordRange *windowedCoordRange;
/** Test to see if @c windowedCoordRange has been set. */
@property(nonatomic, readwrite) BOOL hasWindowedCoordRange;

@property(nonatomic, readwrite) ITMSelectionMode selectionMode;

@property(nonatomic, readwrite) BOOL hasSelectionMode;
@property(nonatomic, readwrite) BOOL connected;

@property(nonatomic, readwrite) BOOL hasConnected;
@end

#pragma mark - ITMSelection

typedef GPB_ENUM(ITMSelection_FieldNumber) {
  ITMSelection_FieldNumber_SubSelectionsArray = 1,
};

@interface ITMSelection : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMSubSelection*> *subSelectionsArray;
/** The number of items in @c subSelectionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger subSelectionsArray_Count;

@end

#pragma mark - ITMSelectionRequest

typedef GPB_ENUM(ITMSelectionRequest_FieldNumber) {
  ITMSelectionRequest_FieldNumber_GetSelectionRequest = 1,
  ITMSelectionRequest_FieldNumber_SetSelectionRequest = 2,
};

typedef GPB_ENUM(ITMSelectionRequest_Request_OneOfCase) {
  ITMSelectionRequest_Request_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMSelectionRequest_Request_OneOfCase_GetSelectionRequest = 1,
  ITMSelectionRequest_Request_OneOfCase_SetSelectionRequest = 2,
};

@interface ITMSelectionRequest : GPBMessage

@property(nonatomic, readonly) ITMSelectionRequest_Request_OneOfCase requestOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMSelectionRequest_GetSelectionRequest *getSelectionRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMSelectionRequest_SetSelectionRequest *setSelectionRequest;

@end

/**
 * Clears whatever value was set for the oneof 'request'.
 **/
void ITMSelectionRequest_ClearRequestOneOfCase(ITMSelectionRequest *message);

#pragma mark - ITMSelectionRequest_GetSelectionRequest

typedef GPB_ENUM(ITMSelectionRequest_GetSelectionRequest_FieldNumber) {
  ITMSelectionRequest_GetSelectionRequest_FieldNumber_SessionId = 1,
};

@interface ITMSelectionRequest_GetSelectionRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;
/** Test to see if @c sessionId has been set. */
@property(nonatomic, readwrite) BOOL hasSessionId;

@end

#pragma mark - ITMSelectionRequest_SetSelectionRequest

typedef GPB_ENUM(ITMSelectionRequest_SetSelectionRequest_FieldNumber) {
  ITMSelectionRequest_SetSelectionRequest_FieldNumber_SessionId = 1,
  ITMSelectionRequest_SetSelectionRequest_FieldNumber_Selection = 2,
};

@interface ITMSelectionRequest_SetSelectionRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;
/** Test to see if @c sessionId has been set. */
@property(nonatomic, readwrite) BOOL hasSessionId;

@property(nonatomic, readwrite, strong, null_resettable) ITMSelection *selection;
/** Test to see if @c selection has been set. */
@property(nonatomic, readwrite) BOOL hasSelection;

@end

#pragma mark - ITMSelectionResponse

typedef GPB_ENUM(ITMSelectionResponse_FieldNumber) {
  ITMSelectionResponse_FieldNumber_Status = 1,
  ITMSelectionResponse_FieldNumber_GetSelectionResponse = 2,
  ITMSelectionResponse_FieldNumber_SetSelectionResponse = 3,
};

typedef GPB_ENUM(ITMSelectionResponse_Response_OneOfCase) {
  ITMSelectionResponse_Response_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMSelectionResponse_Response_OneOfCase_GetSelectionResponse = 2,
  ITMSelectionResponse_Response_OneOfCase_SetSelectionResponse = 3,
};

@interface ITMSelectionResponse : GPBMessage

@property(nonatomic, readwrite) ITMSelectionResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@property(nonatomic, readonly) ITMSelectionResponse_Response_OneOfCase responseOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMSelectionResponse_GetSelectionResponse *getSelectionResponse;

@property(nonatomic, readwrite, strong, null_resettable) ITMSelectionResponse_SetSelectionResponse *setSelectionResponse;

@end

/**
 * Clears whatever value was set for the oneof 'response'.
 **/
void ITMSelectionResponse_ClearResponseOneOfCase(ITMSelectionResponse *message);

#pragma mark - ITMSelectionResponse_GetSelectionResponse

typedef GPB_ENUM(ITMSelectionResponse_GetSelectionResponse_FieldNumber) {
  ITMSelectionResponse_GetSelectionResponse_FieldNumber_Selection = 2,
};

@interface ITMSelectionResponse_GetSelectionResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ITMSelection *selection;
/** Test to see if @c selection has been set. */
@property(nonatomic, readwrite) BOOL hasSelection;

@end

#pragma mark - ITMSelectionResponse_SetSelectionResponse

@interface ITMSelectionResponse_SetSelectionResponse : GPBMessage

@end

#pragma mark - ITMColorPresetRequest

typedef GPB_ENUM(ITMColorPresetRequest_FieldNumber) {
  ITMColorPresetRequest_FieldNumber_ListPresets = 1,
  ITMColorPresetRequest_FieldNumber_GetPreset = 2,
};

typedef GPB_ENUM(ITMColorPresetRequest_Request_OneOfCase) {
  ITMColorPresetRequest_Request_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMColorPresetRequest_Request_OneOfCase_ListPresets = 1,
  ITMColorPresetRequest_Request_OneOfCase_GetPreset = 2,
};

@interface ITMColorPresetRequest : GPBMessage

@property(nonatomic, readonly) ITMColorPresetRequest_Request_OneOfCase requestOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMColorPresetRequest_ListPresets *listPresets;

@property(nonatomic, readwrite, strong, null_resettable) ITMColorPresetRequest_GetPreset *getPreset;

@end

/**
 * Clears whatever value was set for the oneof 'request'.
 **/
void ITMColorPresetRequest_ClearRequestOneOfCase(ITMColorPresetRequest *message);

#pragma mark - ITMColorPresetRequest_ListPresets

@interface ITMColorPresetRequest_ListPresets : GPBMessage

@end

#pragma mark - ITMColorPresetRequest_GetPreset

typedef GPB_ENUM(ITMColorPresetRequest_GetPreset_FieldNumber) {
  ITMColorPresetRequest_GetPreset_FieldNumber_Name = 1,
};

@interface ITMColorPresetRequest_GetPreset : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@end

#pragma mark - ITMColorPresetResponse

typedef GPB_ENUM(ITMColorPresetResponse_FieldNumber) {
  ITMColorPresetResponse_FieldNumber_ListPresets = 1,
  ITMColorPresetResponse_FieldNumber_GetPreset = 2,
  ITMColorPresetResponse_FieldNumber_Status = 3,
};

typedef GPB_ENUM(ITMColorPresetResponse_Response_OneOfCase) {
  ITMColorPresetResponse_Response_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMColorPresetResponse_Response_OneOfCase_ListPresets = 1,
  ITMColorPresetResponse_Response_OneOfCase_GetPreset = 2,
};

@interface ITMColorPresetResponse : GPBMessage

@property(nonatomic, readonly) ITMColorPresetResponse_Response_OneOfCase responseOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMColorPresetResponse_ListPresets *listPresets;

@property(nonatomic, readwrite, strong, null_resettable) ITMColorPresetResponse_GetPreset *getPreset;

@property(nonatomic, readwrite) ITMColorPresetResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

/**
 * Clears whatever value was set for the oneof 'response'.
 **/
void ITMColorPresetResponse_ClearResponseOneOfCase(ITMColorPresetResponse *message);

#pragma mark - ITMColorPresetResponse_ListPresets

typedef GPB_ENUM(ITMColorPresetResponse_ListPresets_FieldNumber) {
  ITMColorPresetResponse_ListPresets_FieldNumber_NameArray = 1,
};

@interface ITMColorPresetResponse_ListPresets : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *nameArray;
/** The number of items in @c nameArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger nameArray_Count;

@end

#pragma mark - ITMColorPresetResponse_GetPreset

typedef GPB_ENUM(ITMColorPresetResponse_GetPreset_FieldNumber) {
  ITMColorPresetResponse_GetPreset_FieldNumber_ColorSettingsArray = 1,
};

@interface ITMColorPresetResponse_GetPreset : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMColorPresetResponse_GetPreset_ColorSetting*> *colorSettingsArray;
/** The number of items in @c colorSettingsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger colorSettingsArray_Count;

@end

#pragma mark - ITMColorPresetResponse_GetPreset_ColorSetting

typedef GPB_ENUM(ITMColorPresetResponse_GetPreset_ColorSetting_FieldNumber) {
  ITMColorPresetResponse_GetPreset_ColorSetting_FieldNumber_Red = 1,
  ITMColorPresetResponse_GetPreset_ColorSetting_FieldNumber_Green = 2,
  ITMColorPresetResponse_GetPreset_ColorSetting_FieldNumber_Blue = 3,
  ITMColorPresetResponse_GetPreset_ColorSetting_FieldNumber_Alpha = 4,
  ITMColorPresetResponse_GetPreset_ColorSetting_FieldNumber_ColorSpace = 5,
  ITMColorPresetResponse_GetPreset_ColorSetting_FieldNumber_Key = 6,
};

@interface ITMColorPresetResponse_GetPreset_ColorSetting : GPBMessage

@property(nonatomic, readwrite) float red;

@property(nonatomic, readwrite) BOOL hasRed;
@property(nonatomic, readwrite) float green;

@property(nonatomic, readwrite) BOOL hasGreen;
@property(nonatomic, readwrite) float blue;

@property(nonatomic, readwrite) BOOL hasBlue;
@property(nonatomic, readwrite) float alpha;

@property(nonatomic, readwrite) BOOL hasAlpha;
@property(nonatomic, readwrite, copy, null_resettable) NSString *colorSpace;
/** Test to see if @c colorSpace has been set. */
@property(nonatomic, readwrite) BOOL hasColorSpace;

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

@end

#pragma mark - ITMPreferencesRequest

typedef GPB_ENUM(ITMPreferencesRequest_FieldNumber) {
  ITMPreferencesRequest_FieldNumber_RequestsArray = 1,
};

@interface ITMPreferencesRequest : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMPreferencesRequest_Request*> *requestsArray;
/** The number of items in @c requestsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger requestsArray_Count;

@end

#pragma mark - ITMPreferencesRequest_Request

typedef GPB_ENUM(ITMPreferencesRequest_Request_FieldNumber) {
  ITMPreferencesRequest_Request_FieldNumber_SetPreferenceRequest = 1,
  ITMPreferencesRequest_Request_FieldNumber_GetPreferenceRequest = 2,
  ITMPreferencesRequest_Request_FieldNumber_SetDefaultProfileRequest = 3,
};

typedef GPB_ENUM(ITMPreferencesRequest_Request_Request_OneOfCase) {
  ITMPreferencesRequest_Request_Request_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMPreferencesRequest_Request_Request_OneOfCase_SetPreferenceRequest = 1,
  ITMPreferencesRequest_Request_Request_OneOfCase_GetPreferenceRequest = 2,
  ITMPreferencesRequest_Request_Request_OneOfCase_SetDefaultProfileRequest = 3,
};

@interface ITMPreferencesRequest_Request : GPBMessage

@property(nonatomic, readonly) ITMPreferencesRequest_Request_Request_OneOfCase requestOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMPreferencesRequest_Request_SetPreference *setPreferenceRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMPreferencesRequest_Request_GetPreference *getPreferenceRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMPreferencesRequest_Request_SetDefaultProfile *setDefaultProfileRequest;

@end

/**
 * Clears whatever value was set for the oneof 'request'.
 **/
void ITMPreferencesRequest_Request_ClearRequestOneOfCase(ITMPreferencesRequest_Request *message);

#pragma mark - ITMPreferencesRequest_Request_SetPreference

typedef GPB_ENUM(ITMPreferencesRequest_Request_SetPreference_FieldNumber) {
  ITMPreferencesRequest_Request_SetPreference_FieldNumber_Key = 1,
  ITMPreferencesRequest_Request_SetPreference_FieldNumber_JsonValue = 2,
};

@interface ITMPreferencesRequest_Request_SetPreference : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonValue;
/** Test to see if @c jsonValue has been set. */
@property(nonatomic, readwrite) BOOL hasJsonValue;

@end

#pragma mark - ITMPreferencesRequest_Request_GetPreference

typedef GPB_ENUM(ITMPreferencesRequest_Request_GetPreference_FieldNumber) {
  ITMPreferencesRequest_Request_GetPreference_FieldNumber_Key = 1,
};

@interface ITMPreferencesRequest_Request_GetPreference : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

@end

#pragma mark - ITMPreferencesRequest_Request_SetDefaultProfile

typedef GPB_ENUM(ITMPreferencesRequest_Request_SetDefaultProfile_FieldNumber) {
  ITMPreferencesRequest_Request_SetDefaultProfile_FieldNumber_Guid = 1,
};

@interface ITMPreferencesRequest_Request_SetDefaultProfile : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *guid;
/** Test to see if @c guid has been set. */
@property(nonatomic, readwrite) BOOL hasGuid;

@end

#pragma mark - ITMPreferencesResponse

typedef GPB_ENUM(ITMPreferencesResponse_FieldNumber) {
  ITMPreferencesResponse_FieldNumber_ResultsArray = 1,
};

@interface ITMPreferencesResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMPreferencesResponse_Result*> *resultsArray;
/** The number of items in @c resultsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger resultsArray_Count;

@end

#pragma mark - ITMPreferencesResponse_Result

typedef GPB_ENUM(ITMPreferencesResponse_Result_FieldNumber) {
  ITMPreferencesResponse_Result_FieldNumber_UnrecognizedRequest = 1,
  ITMPreferencesResponse_Result_FieldNumber_SetPreferenceResult = 2,
  ITMPreferencesResponse_Result_FieldNumber_GetPreferenceResult = 3,
  ITMPreferencesResponse_Result_FieldNumber_SetDefaultProfileResult = 4,
};

typedef GPB_ENUM(ITMPreferencesResponse_Result_Result_OneOfCase) {
  ITMPreferencesResponse_Result_Result_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMPreferencesResponse_Result_Result_OneOfCase_UnrecognizedRequest = 1,
  ITMPreferencesResponse_Result_Result_OneOfCase_SetPreferenceResult = 2,
  ITMPreferencesResponse_Result_Result_OneOfCase_GetPreferenceResult = 3,
  ITMPreferencesResponse_Result_Result_OneOfCase_SetDefaultProfileResult = 4,
};

@interface ITMPreferencesResponse_Result : GPBMessage

@property(nonatomic, readonly) ITMPreferencesResponse_Result_Result_OneOfCase resultOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMPreferencesResponse_Result_UnrecognizedResult *unrecognizedRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMPreferencesResponse_Result_SetPreferenceResult *setPreferenceResult;

@property(nonatomic, readwrite, strong, null_resettable) ITMPreferencesResponse_Result_GetPreferenceResult *getPreferenceResult;

@property(nonatomic, readwrite, strong, null_resettable) ITMPreferencesResponse_Result_SetDefaultProfileResult *setDefaultProfileResult;

@end

/**
 * Clears whatever value was set for the oneof 'result'.
 **/
void ITMPreferencesResponse_Result_ClearResultOneOfCase(ITMPreferencesResponse_Result *message);

#pragma mark - ITMPreferencesResponse_Result_SetPreferenceResult

typedef GPB_ENUM(ITMPreferencesResponse_Result_SetPreferenceResult_FieldNumber) {
  ITMPreferencesResponse_Result_SetPreferenceResult_FieldNumber_Status = 1,
};

@interface ITMPreferencesResponse_Result_SetPreferenceResult : GPBMessage

@property(nonatomic, readwrite) ITMPreferencesResponse_Result_SetPreferenceResult_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMPreferencesResponse_Result_GetPreferenceResult

typedef GPB_ENUM(ITMPreferencesResponse_Result_GetPreferenceResult_FieldNumber) {
  ITMPreferencesResponse_Result_GetPreferenceResult_FieldNumber_JsonValue = 1,
};

@interface ITMPreferencesResponse_Result_GetPreferenceResult : GPBMessage

/** Will be unset if no value assigned. Will always be set if there is a default value. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonValue;
/** Test to see if @c jsonValue has been set. */
@property(nonatomic, readwrite) BOOL hasJsonValue;

@end

#pragma mark - ITMPreferencesResponse_Result_SetDefaultProfileResult

typedef GPB_ENUM(ITMPreferencesResponse_Result_SetDefaultProfileResult_FieldNumber) {
  ITMPreferencesResponse_Result_SetDefaultProfileResult_FieldNumber_Status = 1,
};

@interface ITMPreferencesResponse_Result_SetDefaultProfileResult : GPBMessage

@property(nonatomic, readwrite) ITMPreferencesResponse_Result_SetDefaultProfileResult_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMPreferencesResponse_Result_UnrecognizedResult

@interface ITMPreferencesResponse_Result_UnrecognizedResult : GPBMessage

@end

#pragma mark - ITMReorderTabsRequest

typedef GPB_ENUM(ITMReorderTabsRequest_FieldNumber) {
  ITMReorderTabsRequest_FieldNumber_AssignmentsArray = 3,
};

@interface ITMReorderTabsRequest : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMReorderTabsRequest_Assignment*> *assignmentsArray;
/** The number of items in @c assignmentsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger assignmentsArray_Count;

@end

#pragma mark - ITMReorderTabsRequest_Assignment

typedef GPB_ENUM(ITMReorderTabsRequest_Assignment_FieldNumber) {
  ITMReorderTabsRequest_Assignment_FieldNumber_WindowId = 1,
  ITMReorderTabsRequest_Assignment_FieldNumber_TabIdsArray = 2,
};

@interface ITMReorderTabsRequest_Assignment : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *windowId;
/** Test to see if @c windowId has been set. */
@property(nonatomic, readwrite) BOOL hasWindowId;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *tabIdsArray;
/** The number of items in @c tabIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger tabIdsArray_Count;

@end

#pragma mark - ITMReorderTabsResponse

typedef GPB_ENUM(ITMReorderTabsResponse_FieldNumber) {
  ITMReorderTabsResponse_FieldNumber_Status = 4,
};

@interface ITMReorderTabsResponse : GPBMessage

@property(nonatomic, readwrite) ITMReorderTabsResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMTmuxRequest

typedef GPB_ENUM(ITMTmuxRequest_FieldNumber) {
  ITMTmuxRequest_FieldNumber_ListConnections = 1,
  ITMTmuxRequest_FieldNumber_SendCommand = 2,
  ITMTmuxRequest_FieldNumber_SetWindowVisible = 3,
  ITMTmuxRequest_FieldNumber_CreateWindow = 4,
};

typedef GPB_ENUM(ITMTmuxRequest_Payload_OneOfCase) {
  ITMTmuxRequest_Payload_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMTmuxRequest_Payload_OneOfCase_ListConnections = 1,
  ITMTmuxRequest_Payload_OneOfCase_SendCommand = 2,
  ITMTmuxRequest_Payload_OneOfCase_SetWindowVisible = 3,
  ITMTmuxRequest_Payload_OneOfCase_CreateWindow = 4,
};

@interface ITMTmuxRequest : GPBMessage

@property(nonatomic, readonly) ITMTmuxRequest_Payload_OneOfCase payloadOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMTmuxRequest_ListConnections *listConnections;

@property(nonatomic, readwrite, strong, null_resettable) ITMTmuxRequest_SendCommand *sendCommand;

@property(nonatomic, readwrite, strong, null_resettable) ITMTmuxRequest_SetWindowVisible *setWindowVisible;

@property(nonatomic, readwrite, strong, null_resettable) ITMTmuxRequest_CreateWindow *createWindow;

@end

/**
 * Clears whatever value was set for the oneof 'payload'.
 **/
void ITMTmuxRequest_ClearPayloadOneOfCase(ITMTmuxRequest *message);

#pragma mark - ITMTmuxRequest_ListConnections

@interface ITMTmuxRequest_ListConnections : GPBMessage

@end

#pragma mark - ITMTmuxRequest_SendCommand

typedef GPB_ENUM(ITMTmuxRequest_SendCommand_FieldNumber) {
  ITMTmuxRequest_SendCommand_FieldNumber_ConnectionId = 1,
  ITMTmuxRequest_SendCommand_FieldNumber_Command = 2,
};

@interface ITMTmuxRequest_SendCommand : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *connectionId;
/** Test to see if @c connectionId has been set. */
@property(nonatomic, readwrite) BOOL hasConnectionId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *command;
/** Test to see if @c command has been set. */
@property(nonatomic, readwrite) BOOL hasCommand;

@end

#pragma mark - ITMTmuxRequest_SetWindowVisible

typedef GPB_ENUM(ITMTmuxRequest_SetWindowVisible_FieldNumber) {
  ITMTmuxRequest_SetWindowVisible_FieldNumber_ConnectionId = 1,
  ITMTmuxRequest_SetWindowVisible_FieldNumber_WindowId = 2,
  ITMTmuxRequest_SetWindowVisible_FieldNumber_Visible = 3,
};

@interface ITMTmuxRequest_SetWindowVisible : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *connectionId;
/** Test to see if @c connectionId has been set. */
@property(nonatomic, readwrite) BOOL hasConnectionId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *windowId;
/** Test to see if @c windowId has been set. */
@property(nonatomic, readwrite) BOOL hasWindowId;

@property(nonatomic, readwrite) BOOL visible;

@property(nonatomic, readwrite) BOOL hasVisible;
@end

#pragma mark - ITMTmuxRequest_CreateWindow

typedef GPB_ENUM(ITMTmuxRequest_CreateWindow_FieldNumber) {
  ITMTmuxRequest_CreateWindow_FieldNumber_ConnectionId = 1,
  ITMTmuxRequest_CreateWindow_FieldNumber_Affinity = 2,
};

@interface ITMTmuxRequest_CreateWindow : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *connectionId;
/** Test to see if @c connectionId has been set. */
@property(nonatomic, readwrite) BOOL hasConnectionId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *affinity;
/** Test to see if @c affinity has been set. */
@property(nonatomic, readwrite) BOOL hasAffinity;

@end

#pragma mark - ITMTmuxResponse

typedef GPB_ENUM(ITMTmuxResponse_FieldNumber) {
  ITMTmuxResponse_FieldNumber_ListConnections = 1,
  ITMTmuxResponse_FieldNumber_SendCommand = 2,
  ITMTmuxResponse_FieldNumber_SetWindowVisible = 3,
  ITMTmuxResponse_FieldNumber_Status = 4,
  ITMTmuxResponse_FieldNumber_CreateWindow = 5,
};

typedef GPB_ENUM(ITMTmuxResponse_Payload_OneOfCase) {
  ITMTmuxResponse_Payload_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMTmuxResponse_Payload_OneOfCase_ListConnections = 1,
  ITMTmuxResponse_Payload_OneOfCase_SendCommand = 2,
  ITMTmuxResponse_Payload_OneOfCase_SetWindowVisible = 3,
  ITMTmuxResponse_Payload_OneOfCase_CreateWindow = 5,
};

@interface ITMTmuxResponse : GPBMessage

@property(nonatomic, readonly) ITMTmuxResponse_Payload_OneOfCase payloadOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMTmuxResponse_ListConnections *listConnections;

@property(nonatomic, readwrite, strong, null_resettable) ITMTmuxResponse_SendCommand *sendCommand;

@property(nonatomic, readwrite, strong, null_resettable) ITMTmuxResponse_SetWindowVisible *setWindowVisible;

@property(nonatomic, readwrite, strong, null_resettable) ITMTmuxResponse_CreateWindow *createWindow;

@property(nonatomic, readwrite) ITMTmuxResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

/**
 * Clears whatever value was set for the oneof 'payload'.
 **/
void ITMTmuxResponse_ClearPayloadOneOfCase(ITMTmuxResponse *message);

#pragma mark - ITMTmuxResponse_ListConnections

typedef GPB_ENUM(ITMTmuxResponse_ListConnections_FieldNumber) {
  ITMTmuxResponse_ListConnections_FieldNumber_ConnectionsArray = 1,
};

@interface ITMTmuxResponse_ListConnections : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMTmuxResponse_ListConnections_Connection*> *connectionsArray;
/** The number of items in @c connectionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger connectionsArray_Count;

@end

#pragma mark - ITMTmuxResponse_ListConnections_Connection

typedef GPB_ENUM(ITMTmuxResponse_ListConnections_Connection_FieldNumber) {
  ITMTmuxResponse_ListConnections_Connection_FieldNumber_ConnectionId = 1,
  ITMTmuxResponse_ListConnections_Connection_FieldNumber_OwningSessionId = 2,
};

@interface ITMTmuxResponse_ListConnections_Connection : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *connectionId;
/** Test to see if @c connectionId has been set. */
@property(nonatomic, readwrite) BOOL hasConnectionId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *owningSessionId;
/** Test to see if @c owningSessionId has been set. */
@property(nonatomic, readwrite) BOOL hasOwningSessionId;

@end

#pragma mark - ITMTmuxResponse_SendCommand

typedef GPB_ENUM(ITMTmuxResponse_SendCommand_FieldNumber) {
  ITMTmuxResponse_SendCommand_FieldNumber_Output = 1,
};

@interface ITMTmuxResponse_SendCommand : GPBMessage

/** If not set, an error occurred. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *output;
/** Test to see if @c output has been set. */
@property(nonatomic, readwrite) BOOL hasOutput;

@end

#pragma mark - ITMTmuxResponse_SetWindowVisible

@interface ITMTmuxResponse_SetWindowVisible : GPBMessage

@end

#pragma mark - ITMTmuxResponse_CreateWindow

typedef GPB_ENUM(ITMTmuxResponse_CreateWindow_FieldNumber) {
  ITMTmuxResponse_CreateWindow_FieldNumber_TabId = 1,
};

@interface ITMTmuxResponse_CreateWindow : GPBMessage

/** This is an iTerm2 tab ID. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tabId;
/** Test to see if @c tabId has been set. */
@property(nonatomic, readwrite) BOOL hasTabId;

@end

#pragma mark - ITMGetBroadcastDomainsRequest

@interface ITMGetBroadcastDomainsRequest : GPBMessage

@end

#pragma mark - ITMBroadcastDomain

typedef GPB_ENUM(ITMBroadcastDomain_FieldNumber) {
  ITMBroadcastDomain_FieldNumber_SessionIdsArray = 1,
};

@interface ITMBroadcastDomain : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *sessionIdsArray;
/** The number of items in @c sessionIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger sessionIdsArray_Count;

@end

#pragma mark - ITMGetBroadcastDomainsResponse

typedef GPB_ENUM(ITMGetBroadcastDomainsResponse_FieldNumber) {
  ITMGetBroadcastDomainsResponse_FieldNumber_BroadcastDomainsArray = 1,
};

@interface ITMGetBroadcastDomainsResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMBroadcastDomain*> *broadcastDomainsArray;
/** The number of items in @c broadcastDomainsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger broadcastDomainsArray_Count;

@end

#pragma mark - ITMSetTabLayoutRequest

typedef GPB_ENUM(ITMSetTabLayoutRequest_FieldNumber) {
  ITMSetTabLayoutRequest_FieldNumber_Root = 1,
  ITMSetTabLayoutRequest_FieldNumber_TabId = 2,
};

@interface ITMSetTabLayoutRequest : GPBMessage

/**
 * The tree structure must exactly match the actual tree structure, including the `vertical`
 * setting. Only the grid_sizes may change. They must still add up to the same value in every
 * dimension.
 **/
@property(nonatomic, readwrite, strong, null_resettable) ITMSplitTreeNode *root;
/** Test to see if @c root has been set. */
@property(nonatomic, readwrite) BOOL hasRoot;

@property(nonatomic, readwrite, copy, null_resettable) NSString *tabId;
/** Test to see if @c tabId has been set. */
@property(nonatomic, readwrite) BOOL hasTabId;

@end

#pragma mark - ITMSetTabLayoutResponse

typedef GPB_ENUM(ITMSetTabLayoutResponse_FieldNumber) {
  ITMSetTabLayoutResponse_FieldNumber_Status = 1,
};

@interface ITMSetTabLayoutResponse : GPBMessage

@property(nonatomic, readwrite) ITMSetTabLayoutResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMMenuItemRequest

typedef GPB_ENUM(ITMMenuItemRequest_FieldNumber) {
  ITMMenuItemRequest_FieldNumber_Identifier = 1,
  ITMMenuItemRequest_FieldNumber_QueryOnly = 2,
};

/**
 * Invoke or ask for info about a menu item
 **/
@interface ITMMenuItemRequest : GPBMessage

/** Unique identifier of the menu item. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;
/** Test to see if @c identifier has been set. */
@property(nonatomic, readwrite) BOOL hasIdentifier;

/** If set do not actually invoke it. Just return its state. */
@property(nonatomic, readwrite) BOOL queryOnly;

@property(nonatomic, readwrite) BOOL hasQueryOnly;
@end

#pragma mark - ITMMenuItemResponse

typedef GPB_ENUM(ITMMenuItemResponse_FieldNumber) {
  ITMMenuItemResponse_FieldNumber_Status = 1,
  ITMMenuItemResponse_FieldNumber_Checked = 2,
  ITMMenuItemResponse_FieldNumber_Enabled = 3,
};

@interface ITMMenuItemResponse : GPBMessage

@property(nonatomic, readwrite) ITMMenuItemResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@property(nonatomic, readwrite) BOOL checked;

@property(nonatomic, readwrite) BOOL hasChecked;
@property(nonatomic, readwrite) BOOL enabled;

@property(nonatomic, readwrite) BOOL hasEnabled;
@end

#pragma mark - ITMRestartSessionRequest

typedef GPB_ENUM(ITMRestartSessionRequest_FieldNumber) {
  ITMRestartSessionRequest_FieldNumber_SessionId = 1,
  ITMRestartSessionRequest_FieldNumber_OnlyIfExited = 2,
};

@interface ITMRestartSessionRequest : GPBMessage

/** "all" not allowed. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;
/** Test to see if @c sessionId has been set. */
@property(nonatomic, readwrite) BOOL hasSessionId;

/**
 * If set, then still-running sessions will fail to restart with SESSION_NOT_RESTARTABLE.
 * If not set, then a still-running session gets killed and restarted.
 **/
@property(nonatomic, readwrite) BOOL onlyIfExited;

@property(nonatomic, readwrite) BOOL hasOnlyIfExited;
@end

#pragma mark - ITMRestartSessionResponse

typedef GPB_ENUM(ITMRestartSessionResponse_FieldNumber) {
  ITMRestartSessionResponse_FieldNumber_Status = 1,
};

@interface ITMRestartSessionResponse : GPBMessage

@property(nonatomic, readwrite) ITMRestartSessionResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMServerOriginatedRPCResultRequest

typedef GPB_ENUM(ITMServerOriginatedRPCResultRequest_FieldNumber) {
  ITMServerOriginatedRPCResultRequest_FieldNumber_RequestId = 1,
  ITMServerOriginatedRPCResultRequest_FieldNumber_JsonException = 2,
  ITMServerOriginatedRPCResultRequest_FieldNumber_JsonValue = 3,
};

typedef GPB_ENUM(ITMServerOriginatedRPCResultRequest_Result_OneOfCase) {
  ITMServerOriginatedRPCResultRequest_Result_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMServerOriginatedRPCResultRequest_Result_OneOfCase_JsonException = 2,
  ITMServerOriginatedRPCResultRequest_Result_OneOfCase_JsonValue = 3,
};

/**
 * This is the result of an iTerm2-to-script RPC call.
 **/
@interface ITMServerOriginatedRPCResultRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *requestId;
/** Test to see if @c requestId has been set. */
@property(nonatomic, readwrite) BOOL hasRequestId;

@property(nonatomic, readonly) ITMServerOriginatedRPCResultRequest_Result_OneOfCase resultOneOfCase;

/**
 * Exceptions should be dictionaries with a key of "reason" having a string value describing
 * what went wrong.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonException;

@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonValue;

@end

/**
 * Clears whatever value was set for the oneof 'result'.
 **/
void ITMServerOriginatedRPCResultRequest_ClearResultOneOfCase(ITMServerOriginatedRPCResultRequest *message);

#pragma mark - ITMServerOriginatedRPCResultResponse

/**
 * This simply acknowledges receipt of ServerOriginatedRPCResultRequest.
 **/
@interface ITMServerOriginatedRPCResultResponse : GPBMessage

@end

#pragma mark - ITMListProfilesRequest

typedef GPB_ENUM(ITMListProfilesRequest_FieldNumber) {
  ITMListProfilesRequest_FieldNumber_PropertiesArray = 1,
  ITMListProfilesRequest_FieldNumber_GuidsArray = 2,
};

/**
 * Requests a list of all profiles.
 **/
@interface ITMListProfilesRequest : GPBMessage

/**
 * The profile properties to respond with. See SetProfilePropertyRequest for a list of values.
 * If empty, all properties will be returned.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *propertiesArray;
/** The number of items in @c propertiesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger propertiesArray_Count;

/**
 * If empty, all profiles will be returned. Otherwise, only profiles with one of the listed
 * GUIDs will be returned.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *guidsArray;
/** The number of items in @c guidsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger guidsArray_Count;

@end

#pragma mark - ITMListProfilesResponse

typedef GPB_ENUM(ITMListProfilesResponse_FieldNumber) {
  ITMListProfilesResponse_FieldNumber_ProfilesArray = 1,
};

@interface ITMListProfilesResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMListProfilesResponse_Profile*> *profilesArray;
/** The number of items in @c profilesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger profilesArray_Count;

@end

#pragma mark - ITMListProfilesResponse_Profile

typedef GPB_ENUM(ITMListProfilesResponse_Profile_FieldNumber) {
  ITMListProfilesResponse_Profile_FieldNumber_PropertiesArray = 1,
};

@interface ITMListProfilesResponse_Profile : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMProfileProperty*> *propertiesArray;
/** The number of items in @c propertiesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger propertiesArray_Count;

@end

#pragma mark - ITMFocusRequest

@interface ITMFocusRequest : GPBMessage

@end

#pragma mark - ITMFocusResponse

typedef GPB_ENUM(ITMFocusResponse_FieldNumber) {
  ITMFocusResponse_FieldNumber_NotificationsArray = 1,
};

@interface ITMFocusResponse : GPBMessage

/**
 * A collection of notifications that completely describe the state of every tab and window and
 * the application itself.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMFocusChangedNotification*> *notificationsArray;
/** The number of items in @c notificationsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notificationsArray_Count;

@end

#pragma mark - ITMSavedArrangementRequest

typedef GPB_ENUM(ITMSavedArrangementRequest_FieldNumber) {
  ITMSavedArrangementRequest_FieldNumber_Name = 1,
  ITMSavedArrangementRequest_FieldNumber_Action = 2,
  ITMSavedArrangementRequest_FieldNumber_WindowId = 3,
};

@interface ITMSavedArrangementRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite) ITMSavedArrangementRequest_Action action;

@property(nonatomic, readwrite) BOOL hasAction;
/**
 * If given and the action is SAVE then only the tabs in the identified window are saved.
 * If given and the action is RESTORE then the arrangement will be restored as tabs in the identified window.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *windowId;
/** Test to see if @c windowId has been set. */
@property(nonatomic, readwrite) BOOL hasWindowId;

@end

#pragma mark - ITMSavedArrangementResponse

typedef GPB_ENUM(ITMSavedArrangementResponse_FieldNumber) {
  ITMSavedArrangementResponse_FieldNumber_Status = 1,
};

@interface ITMSavedArrangementResponse : GPBMessage

@property(nonatomic, readwrite) ITMSavedArrangementResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMVariableRequest

typedef GPB_ENUM(ITMVariableRequest_FieldNumber) {
  ITMVariableRequest_FieldNumber_SessionId = 1,
  ITMVariableRequest_FieldNumber_SetArray = 2,
  ITMVariableRequest_FieldNumber_GetArray = 3,
  ITMVariableRequest_FieldNumber_TabId = 4,
  ITMVariableRequest_FieldNumber_App = 5,
};

typedef GPB_ENUM(ITMVariableRequest_Scope_OneOfCase) {
  ITMVariableRequest_Scope_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMVariableRequest_Scope_OneOfCase_SessionId = 1,
  ITMVariableRequest_Scope_OneOfCase_TabId = 4,
  ITMVariableRequest_Scope_OneOfCase_App = 5,
};

@interface ITMVariableRequest : GPBMessage

@property(nonatomic, readonly) ITMVariableRequest_Scope_OneOfCase scopeOneOfCase;

/** "all" is allowed only if no gets (only sets allowed) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

/** "all" is allowed only if no gets (only sets allowed) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tabId;

@property(nonatomic, readwrite) BOOL app;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMVariableRequest_Set*> *setArray;
/** The number of items in @c setArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger setArray_Count;

/** Set to special value "*" to get all in a JSON dictionary */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *getArray;
/** The number of items in @c getArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger getArray_Count;

@end

/**
 * Clears whatever value was set for the oneof 'scope'.
 **/
void ITMVariableRequest_ClearScopeOneOfCase(ITMVariableRequest *message);

#pragma mark - ITMVariableRequest_Set

typedef GPB_ENUM(ITMVariableRequest_Set_FieldNumber) {
  ITMVariableRequest_Set_FieldNumber_Name = 1,
  ITMVariableRequest_Set_FieldNumber_Value = 2,
};

@interface ITMVariableRequest_Set : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/** JSON encoded */
@property(nonatomic, readwrite, copy, null_resettable) NSString *value;
/** Test to see if @c value has been set. */
@property(nonatomic, readwrite) BOOL hasValue;

@end

#pragma mark - ITMVariableResponse

typedef GPB_ENUM(ITMVariableResponse_FieldNumber) {
  ITMVariableResponse_FieldNumber_Status = 1,
  ITMVariableResponse_FieldNumber_ValuesArray = 2,
};

@interface ITMVariableResponse : GPBMessage

@property(nonatomic, readwrite) ITMVariableResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
/** 1:1 with get field in request.  JSON encoded, with null for unset variables. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *valuesArray;
/** The number of items in @c valuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger valuesArray_Count;

@end

#pragma mark - ITMActivateRequest

typedef GPB_ENUM(ITMActivateRequest_FieldNumber) {
  ITMActivateRequest_FieldNumber_WindowId = 1,
  ITMActivateRequest_FieldNumber_TabId = 2,
  ITMActivateRequest_FieldNumber_SessionId = 3,
  ITMActivateRequest_FieldNumber_OrderWindowFront = 4,
  ITMActivateRequest_FieldNumber_SelectTab = 5,
  ITMActivateRequest_FieldNumber_SelectSession = 6,
  ITMActivateRequest_FieldNumber_ActivateApp = 7,
};

typedef GPB_ENUM(ITMActivateRequest_Identifier_OneOfCase) {
  ITMActivateRequest_Identifier_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMActivateRequest_Identifier_OneOfCase_WindowId = 1,
  ITMActivateRequest_Identifier_OneOfCase_TabId = 2,
  ITMActivateRequest_Identifier_OneOfCase_SessionId = 3,
};

@interface ITMActivateRequest : GPBMessage

/** To activate the app without changing anything else omit the identifier. */
@property(nonatomic, readonly) ITMActivateRequest_Identifier_OneOfCase identifierOneOfCase;

@property(nonatomic, readwrite, copy, null_resettable) NSString *windowId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *tabId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

@property(nonatomic, readwrite) BOOL orderWindowFront;

@property(nonatomic, readwrite) BOOL hasOrderWindowFront;
/** This may be enabled if tab_id or session_id is set. */
@property(nonatomic, readwrite) BOOL selectTab;

@property(nonatomic, readwrite) BOOL hasSelectTab;
/** This may be enabled if session_id is set. */
@property(nonatomic, readwrite) BOOL selectSession;

@property(nonatomic, readwrite) BOOL hasSelectSession;
@property(nonatomic, readwrite, strong, null_resettable) ITMActivateRequest_App *activateApp;
/** Test to see if @c activateApp has been set. */
@property(nonatomic, readwrite) BOOL hasActivateApp;

@end

/**
 * Clears whatever value was set for the oneof 'identifier'.
 **/
void ITMActivateRequest_ClearIdentifierOneOfCase(ITMActivateRequest *message);

#pragma mark - ITMActivateRequest_App

typedef GPB_ENUM(ITMActivateRequest_App_FieldNumber) {
  ITMActivateRequest_App_FieldNumber_RaiseAllWindows = 1,
  ITMActivateRequest_App_FieldNumber_IgnoringOtherApps = 2,
};

/**
 * Activate the app?
 **/
@interface ITMActivateRequest_App : GPBMessage

@property(nonatomic, readwrite) BOOL raiseAllWindows;

@property(nonatomic, readwrite) BOOL hasRaiseAllWindows;
@property(nonatomic, readwrite) BOOL ignoringOtherApps;

@property(nonatomic, readwrite) BOOL hasIgnoringOtherApps;
@end

#pragma mark - ITMActivateResponse

typedef GPB_ENUM(ITMActivateResponse_FieldNumber) {
  ITMActivateResponse_FieldNumber_Status = 1,
};

@interface ITMActivateResponse : GPBMessage

@property(nonatomic, readwrite) ITMActivateResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMInjectRequest

typedef GPB_ENUM(ITMInjectRequest_FieldNumber) {
  ITMInjectRequest_FieldNumber_SessionIdArray = 1,
  ITMInjectRequest_FieldNumber_Data_p = 2,
};

/**
 * Injects bytes as input to the terminal, as though the running program had produced them.
 **/
@interface ITMInjectRequest : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *sessionIdArray;
/** The number of items in @c sessionIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger sessionIdArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - ITMInjectResponse

typedef GPB_ENUM(ITMInjectResponse_FieldNumber) {
  ITMInjectResponse_FieldNumber_StatusArray = 1,
};

@interface ITMInjectResponse : GPBMessage

/** One status per session_id in the request */
// |statusArray| contains |ITMInjectResponse_Status|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *statusArray;
/** The number of items in @c statusArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger statusArray_Count;

@end

#pragma mark - ITMGetPropertyRequest

typedef GPB_ENUM(ITMGetPropertyRequest_FieldNumber) {
  ITMGetPropertyRequest_FieldNumber_WindowId = 1,
  ITMGetPropertyRequest_FieldNumber_Name = 2,
  ITMGetPropertyRequest_FieldNumber_SessionId = 3,
};

typedef GPB_ENUM(ITMGetPropertyRequest_Identifier_OneOfCase) {
  ITMGetPropertyRequest_Identifier_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMGetPropertyRequest_Identifier_OneOfCase_WindowId = 1,
  ITMGetPropertyRequest_Identifier_OneOfCase_SessionId = 3,
};

@interface ITMGetPropertyRequest : GPBMessage

/** The kind of ID that's set determines the kind of object you're querying. */
@property(nonatomic, readonly) ITMGetPropertyRequest_Identifier_OneOfCase identifierOneOfCase;

@property(nonatomic, readwrite, copy, null_resettable) NSString *windowId;

/** Does not accept "all". Accepts "active". */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

/**
 * For sessions:
 * "grid_size" -> { "width": number, "height": number }
 * "buried" -> boolean
 * "number_of_lines" -> { "overflow": number, "grid": number, "history": number }
 *
 * For windows:
 * "frame" -> { "origin": { "x": number, "y": number }, "size": { "width": number, "height": number } }
 * "fullscreen" -> boolean
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@end

/**
 * Clears whatever value was set for the oneof 'identifier'.
 **/
void ITMGetPropertyRequest_ClearIdentifierOneOfCase(ITMGetPropertyRequest *message);

#pragma mark - ITMGetPropertyResponse

typedef GPB_ENUM(ITMGetPropertyResponse_FieldNumber) {
  ITMGetPropertyResponse_FieldNumber_Status = 1,
  ITMGetPropertyResponse_FieldNumber_JsonValue = 2,
};

@interface ITMGetPropertyResponse : GPBMessage

/**
 * Name           Example value
 * -------------  ---------------
 * frame          { "origin": { "x": 0, "y": 0 }, "size": { "width": 1024, "height": 768 }}
 * fullscreen     true, false
 *
 * For sessions:
 * grid_size      { "width": 80, "height": 25 }
 * buried         true
 **/
@property(nonatomic, readwrite) ITMGetPropertyResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonValue;
/** Test to see if @c jsonValue has been set. */
@property(nonatomic, readwrite) BOOL hasJsonValue;

@end

#pragma mark - ITMSetPropertyRequest

typedef GPB_ENUM(ITMSetPropertyRequest_FieldNumber) {
  ITMSetPropertyRequest_FieldNumber_WindowId = 1,
  ITMSetPropertyRequest_FieldNumber_Name = 3,
  ITMSetPropertyRequest_FieldNumber_JsonValue = 4,
  ITMSetPropertyRequest_FieldNumber_SessionId = 5,
};

typedef GPB_ENUM(ITMSetPropertyRequest_Identifier_OneOfCase) {
  ITMSetPropertyRequest_Identifier_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMSetPropertyRequest_Identifier_OneOfCase_WindowId = 1,
  ITMSetPropertyRequest_Identifier_OneOfCase_SessionId = 5,
};

@interface ITMSetPropertyRequest : GPBMessage

/**
 * Eventually you'll be able to set properties on other things besides The kind of ID that's set
 * determines the kind of object you're updating.
 **/
@property(nonatomic, readonly) ITMSetPropertyRequest_Identifier_OneOfCase identifierOneOfCase;

@property(nonatomic, readwrite, copy, null_resettable) NSString *windowId;

/** Accepts "all" and "active" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

/**
 * For windows:
 * Name           Example JSON
 * -------------  ---------------
 * frame          { "origin": { "x": 0, "y": 0 }, "size": { "width": 1024, "height": 768 }}
 * fullscreen     true, false
 *
 * For sessions:
 * grid_size      { "width": 80, "height": 25 }
 * buried         true
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonValue;
/** Test to see if @c jsonValue has been set. */
@property(nonatomic, readwrite) BOOL hasJsonValue;

@end

/**
 * Clears whatever value was set for the oneof 'identifier'.
 **/
void ITMSetPropertyRequest_ClearIdentifierOneOfCase(ITMSetPropertyRequest *message);

#pragma mark - ITMSetPropertyResponse

typedef GPB_ENUM(ITMSetPropertyResponse_FieldNumber) {
  ITMSetPropertyResponse_FieldNumber_Status = 1,
};

@interface ITMSetPropertyResponse : GPBMessage

@property(nonatomic, readwrite) ITMSetPropertyResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMRegisterToolRequest

typedef GPB_ENUM(ITMRegisterToolRequest_FieldNumber) {
  ITMRegisterToolRequest_FieldNumber_Name = 1,
  ITMRegisterToolRequest_FieldNumber_Identifier = 2,
  ITMRegisterToolRequest_FieldNumber_ToolType = 3,
  ITMRegisterToolRequest_FieldNumber_URL = 4,
  ITMRegisterToolRequest_FieldNumber_RevealIfAlreadyRegistered = 5,
};

/**
 * Registers a toolbelt tool that displays a webview with a URL of your choice.
 **/
@interface ITMRegisterToolRequest : GPBMessage

/** This name is displayed to the user. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/**
 * The tool's identifier should be unique. Prefix it with your app bundle. For example:
 * com.example.mytool
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;
/** Test to see if @c identifier has been set. */
@property(nonatomic, readwrite) BOOL hasIdentifier;

/**
 * The first time a tool is registered iTerm2 automatically adds it to the
 * set of visible tools. To show it on subsequent re-registrations, set this
 * to true. If the toolbelt itself is hidden, it will not be opened.
 **/
@property(nonatomic, readwrite) BOOL revealIfAlreadyRegistered;

@property(nonatomic, readwrite) BOOL hasRevealIfAlreadyRegistered;
@property(nonatomic, readwrite) ITMRegisterToolRequest_ToolType toolType;

@property(nonatomic, readwrite) BOOL hasToolType;
/** For web view tools: The URL loaded at startup */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;
/** Test to see if @c URL has been set. */
@property(nonatomic, readwrite) BOOL hasURL;

@end

#pragma mark - ITMRPCRegistrationRequest

typedef GPB_ENUM(ITMRPCRegistrationRequest_FieldNumber) {
  ITMRPCRegistrationRequest_FieldNumber_Name = 1,
  ITMRPCRegistrationRequest_FieldNumber_ArgumentsArray = 2,
  ITMRPCRegistrationRequest_FieldNumber_Timeout = 3,
  ITMRPCRegistrationRequest_FieldNumber_DefaultsArray = 4,
  ITMRPCRegistrationRequest_FieldNumber_Role = 5,
  ITMRPCRegistrationRequest_FieldNumber_DisplayName = 6,
  ITMRPCRegistrationRequest_FieldNumber_SessionTitleAttributes = 7,
  ITMRPCRegistrationRequest_FieldNumber_StatusBarComponentAttributes = 8,
};

typedef GPB_ENUM(ITMRPCRegistrationRequest_RoleSpecificAttributes_OneOfCase) {
  ITMRPCRegistrationRequest_RoleSpecificAttributes_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMRPCRegistrationRequest_RoleSpecificAttributes_OneOfCase_SessionTitleAttributes = 7,
  ITMRPCRegistrationRequest_RoleSpecificAttributes_OneOfCase_StatusBarComponentAttributes = 8,
};

/**
 * Describes an RPC from iTerm2 to script. I don't want to invent my own type
 * system so this is dynamically typed, which matches Python well enough.
 **/
@interface ITMRPCRegistrationRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMRPCRegistrationRequest_RPCArgumentSignature*> *argumentsArray;
/** The number of items in @c argumentsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger argumentsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMRPCRegistrationRequest_RPCArgument*> *defaultsArray;
/** The number of items in @c defaultsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger defaultsArray_Count;

/** If not specified, iTerm2 decides based on its built-in default. */
@property(nonatomic, readwrite) float timeout;

@property(nonatomic, readwrite) BOOL hasTimeout;
@property(nonatomic, readwrite) ITMRPCRegistrationRequest_Role role;

@property(nonatomic, readwrite) BOOL hasRole;
@property(nonatomic, readonly) ITMRPCRegistrationRequest_RoleSpecificAttributes_OneOfCase roleSpecificAttributesOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMRPCRegistrationRequest_SessionTitleAttributes *sessionTitleAttributes;

@property(nonatomic, readwrite, strong, null_resettable) ITMRPCRegistrationRequest_StatusBarComponentAttributes *statusBarComponentAttributes;

@property(nonatomic, readwrite, copy, null_resettable) NSString *displayName DEPRECATED_ATTRIBUTE;
/** Test to see if @c displayName has been set. */
@property(nonatomic, readwrite) BOOL hasDisplayName DEPRECATED_ATTRIBUTE;

@end

/**
 * Clears whatever value was set for the oneof 'roleSpecificAttributes'.
 **/
void ITMRPCRegistrationRequest_ClearRoleSpecificAttributesOneOfCase(ITMRPCRegistrationRequest *message);

#pragma mark - ITMRPCRegistrationRequest_RPCArgumentSignature

typedef GPB_ENUM(ITMRPCRegistrationRequest_RPCArgumentSignature_FieldNumber) {
  ITMRPCRegistrationRequest_RPCArgumentSignature_FieldNumber_Name = 1,
};

@interface ITMRPCRegistrationRequest_RPCArgumentSignature : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@end

#pragma mark - ITMRPCRegistrationRequest_RPCArgument

typedef GPB_ENUM(ITMRPCRegistrationRequest_RPCArgument_FieldNumber) {
  ITMRPCRegistrationRequest_RPCArgument_FieldNumber_Name = 1,
  ITMRPCRegistrationRequest_RPCArgument_FieldNumber_Path = 2,
};

@interface ITMRPCRegistrationRequest_RPCArgument : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *path;
/** Test to see if @c path has been set. */
@property(nonatomic, readwrite) BOOL hasPath;

@end

#pragma mark - ITMRPCRegistrationRequest_SessionTitleAttributes

typedef GPB_ENUM(ITMRPCRegistrationRequest_SessionTitleAttributes_FieldNumber) {
  ITMRPCRegistrationRequest_SessionTitleAttributes_FieldNumber_DisplayName = 1,
};

@interface ITMRPCRegistrationRequest_SessionTitleAttributes : GPBMessage

/** Used by SESSION_TITLE to control name in Preferences menu */
@property(nonatomic, readwrite, copy, null_resettable) NSString *displayName;
/** Test to see if @c displayName has been set. */
@property(nonatomic, readwrite) BOOL hasDisplayName;

@end

#pragma mark - ITMRPCRegistrationRequest_StatusBarComponentAttributes

typedef GPB_ENUM(ITMRPCRegistrationRequest_StatusBarComponentAttributes_FieldNumber) {
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_FieldNumber_ShortDescription = 1,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_FieldNumber_DetailedDescription = 2,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_FieldNumber_KnobsArray = 3,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_FieldNumber_Exemplar = 4,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_FieldNumber_UpdateCadence = 5,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_FieldNumber_UniqueIdentifier = 6,
};

@interface ITMRPCRegistrationRequest_StatusBarComponentAttributes : GPBMessage

/** Used by STATUS_BAR_COMPONENT */
@property(nonatomic, readwrite, copy, null_resettable) NSString *shortDescription;
/** Test to see if @c shortDescription has been set. */
@property(nonatomic, readwrite) BOOL hasShortDescription;

@property(nonatomic, readwrite, copy, null_resettable) NSString *detailedDescription;
/** Test to see if @c detailedDescription has been set. */
@property(nonatomic, readwrite) BOOL hasDetailedDescription;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob*> *knobsArray;
/** The number of items in @c knobsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger knobsArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *exemplar;
/** Test to see if @c exemplar has been set. */
@property(nonatomic, readwrite) BOOL hasExemplar;

@property(nonatomic, readwrite) float updateCadence;

@property(nonatomic, readwrite) BOOL hasUpdateCadence;
/**
 * Identifies this component uniquely. Must not conflict with other components.
 * Use a backwards domain name identifying yourself and the feature, like "com.example.featurename"
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *uniqueIdentifier;
/** Test to see if @c uniqueIdentifier has been set. */
@property(nonatomic, readwrite) BOOL hasUniqueIdentifier;

@end

#pragma mark - ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob

typedef GPB_ENUM(ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_FieldNumber) {
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_FieldNumber_Name = 1,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_FieldNumber_Type = 2,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_FieldNumber_Placeholder = 3,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_FieldNumber_JsonDefaultValue = 4,
  ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_FieldNumber_Key = 5,
};

@interface ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite) ITMRPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *placeholder;
/** Test to see if @c placeholder has been set. */
@property(nonatomic, readwrite) BOOL hasPlaceholder;

@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonDefaultValue;
/** Test to see if @c jsonDefaultValue has been set. */
@property(nonatomic, readwrite) BOOL hasJsonDefaultValue;

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

@end

#pragma mark - ITMRegisterToolResponse

typedef GPB_ENUM(ITMRegisterToolResponse_FieldNumber) {
  ITMRegisterToolResponse_FieldNumber_Status = 1,
};

@interface ITMRegisterToolResponse : GPBMessage

@property(nonatomic, readwrite) ITMRegisterToolResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMKeystrokePattern

typedef GPB_ENUM(ITMKeystrokePattern_FieldNumber) {
  ITMKeystrokePattern_FieldNumber_RequiredModifiersArray = 1,
  ITMKeystrokePattern_FieldNumber_ForbiddenModifiersArray = 2,
  ITMKeystrokePattern_FieldNumber_KeycodesArray = 3,
  ITMKeystrokePattern_FieldNumber_CharactersArray = 4,
  ITMKeystrokePattern_FieldNumber_CharactersIgnoringModifiersArray = 5,
};

@interface ITMKeystrokePattern : GPBMessage

/** The keystroke matches the pattern if it has all the required and none of the forbidden modifiers. */
// |requiredModifiersArray| contains |ITMModifiers|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *requiredModifiersArray;
/** The number of items in @c requiredModifiersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger requiredModifiersArray_Count;

// |forbiddenModifiersArray| contains |ITMModifiers|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *forbiddenModifiersArray;
/** The number of items in @c forbiddenModifiersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger forbiddenModifiersArray_Count;

/** The pattern matches if the keystroke has any of these keycodes: */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *keycodesArray;
/** The number of items in @c keycodesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger keycodesArray_Count;

/** The pattern matches if the keystroke equals of any of these characters: */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *charactersArray;
/** The number of items in @c charactersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger charactersArray_Count;

/**
 * The pattern matches if the keystroke equals any of these characters ignoring modifiers.
 * This is Apple parlance for "ignoring the shift key plus various other undocumented things"
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *charactersIgnoringModifiersArray;
/** The number of items in @c charactersIgnoringModifiersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger charactersIgnoringModifiersArray_Count;

@end

#pragma mark - ITMKeystrokeMonitorRequest

typedef GPB_ENUM(ITMKeystrokeMonitorRequest_FieldNumber) {
  ITMKeystrokeMonitorRequest_FieldNumber_PatternsToIgnoreArray = 1,
};

@interface ITMKeystrokeMonitorRequest : GPBMessage

/**
 * If a keystroke matches any of these patterns then they will not be handled by the application.
 * A notification will be posted and the script can handle it as it pleases.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMKeystrokePattern*> *patternsToIgnoreArray;
/** The number of items in @c patternsToIgnoreArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger patternsToIgnoreArray_Count;

@end

#pragma mark - ITMVariableMonitorRequest

typedef GPB_ENUM(ITMVariableMonitorRequest_FieldNumber) {
  ITMVariableMonitorRequest_FieldNumber_Name = 1,
  ITMVariableMonitorRequest_FieldNumber_Scope = 2,
  ITMVariableMonitorRequest_FieldNumber_Identifier = 3,
};

@interface ITMVariableMonitorRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite) ITMVariableScope scope;

@property(nonatomic, readwrite) BOOL hasScope;
/** Session, Window, or Tab identifier. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;
/** Test to see if @c identifier has been set. */
@property(nonatomic, readwrite) BOOL hasIdentifier;

@end

#pragma mark - ITMProfileChangeRequest

typedef GPB_ENUM(ITMProfileChangeRequest_FieldNumber) {
  ITMProfileChangeRequest_FieldNumber_Guid = 1,
};

@interface ITMProfileChangeRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *guid;
/** Test to see if @c guid has been set. */
@property(nonatomic, readwrite) BOOL hasGuid;

@end

#pragma mark - ITMNotificationRequest

typedef GPB_ENUM(ITMNotificationRequest_FieldNumber) {
  ITMNotificationRequest_FieldNumber_Session = 1,
  ITMNotificationRequest_FieldNumber_Subscribe = 2,
  ITMNotificationRequest_FieldNumber_NotificationType = 3,
  ITMNotificationRequest_FieldNumber_RpcRegistrationRequest = 4,
  ITMNotificationRequest_FieldNumber_KeystrokeMonitorRequest = 5,
  ITMNotificationRequest_FieldNumber_VariableMonitorRequest = 6,
  ITMNotificationRequest_FieldNumber_ProfileChangeRequest = 7,
};

typedef GPB_ENUM(ITMNotificationRequest_Arguments_OneOfCase) {
  ITMNotificationRequest_Arguments_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMNotificationRequest_Arguments_OneOfCase_RpcRegistrationRequest = 4,
  ITMNotificationRequest_Arguments_OneOfCase_KeystrokeMonitorRequest = 5,
  ITMNotificationRequest_Arguments_OneOfCase_VariableMonitorRequest = 6,
  ITMNotificationRequest_Arguments_OneOfCase_ProfileChangeRequest = 7,
};

@interface ITMNotificationRequest : GPBMessage

/**
 * See documentation on session IDs. NOTIFY_ON_NEW_SESSION, NOTIFY_ON_TERMINATE_SESSION, and
 * NOTIFY_ON_LAYOUT_CHANGE do not use the session ID and are posted on all such events.
 *
 * NOTE: This is not used for NOTIFY_ON_VARIABLE_CHANGE.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

/** Set to true to subscribe, false to unsubscribe. */
@property(nonatomic, readwrite) BOOL subscribe;

@property(nonatomic, readwrite) BOOL hasSubscribe;
/** When to be notified (or notification to unsubscribe from) */
@property(nonatomic, readwrite) ITMNotificationType notificationType;

@property(nonatomic, readwrite) BOOL hasNotificationType;
@property(nonatomic, readonly) ITMNotificationRequest_Arguments_OneOfCase argumentsOneOfCase;

/** For NOTIFY_ON_SERVER_ORIGINATED_RPC */
@property(nonatomic, readwrite, strong, null_resettable) ITMRPCRegistrationRequest *rpcRegistrationRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMKeystrokeMonitorRequest *keystrokeMonitorRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMVariableMonitorRequest *variableMonitorRequest;

@property(nonatomic, readwrite, strong, null_resettable) ITMProfileChangeRequest *profileChangeRequest;

@end

/**
 * Clears whatever value was set for the oneof 'arguments'.
 **/
void ITMNotificationRequest_ClearArgumentsOneOfCase(ITMNotificationRequest *message);

#pragma mark - ITMNotificationResponse

typedef GPB_ENUM(ITMNotificationResponse_FieldNumber) {
  ITMNotificationResponse_FieldNumber_Status = 1,
};

@interface ITMNotificationResponse : GPBMessage

@property(nonatomic, readwrite) ITMNotificationResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMNotification

typedef GPB_ENUM(ITMNotification_FieldNumber) {
  ITMNotification_FieldNumber_KeystrokeNotification = 1,
  ITMNotification_FieldNumber_ScreenUpdateNotification = 2,
  ITMNotification_FieldNumber_PromptNotification = 3,
  ITMNotification_FieldNumber_LocationChangeNotification = 4,
  ITMNotification_FieldNumber_CustomEscapeSequenceNotification = 5,
  ITMNotification_FieldNumber_NewSessionNotification = 6,
  ITMNotification_FieldNumber_TerminateSessionNotification = 7,
  ITMNotification_FieldNumber_LayoutChangedNotification = 8,
  ITMNotification_FieldNumber_FocusChangedNotification = 9,
  ITMNotification_FieldNumber_ServerOriginatedRpcNotification = 10,
  ITMNotification_FieldNumber_BroadcastDomainsChanged = 11,
  ITMNotification_FieldNumber_VariableChangedNotification = 12,
  ITMNotification_FieldNumber_ProfileChangedNotification = 13,
};

@interface ITMNotification : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ITMKeystrokeNotification *keystrokeNotification;
/** Test to see if @c keystrokeNotification has been set. */
@property(nonatomic, readwrite) BOOL hasKeystrokeNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMScreenUpdateNotification *screenUpdateNotification;
/** Test to see if @c screenUpdateNotification has been set. */
@property(nonatomic, readwrite) BOOL hasScreenUpdateNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMPromptNotification *promptNotification;
/** Test to see if @c promptNotification has been set. */
@property(nonatomic, readwrite) BOOL hasPromptNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMLocationChangeNotification *locationChangeNotification;
/** Test to see if @c locationChangeNotification has been set. */
@property(nonatomic, readwrite) BOOL hasLocationChangeNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMCustomEscapeSequenceNotification *customEscapeSequenceNotification;
/** Test to see if @c customEscapeSequenceNotification has been set. */
@property(nonatomic, readwrite) BOOL hasCustomEscapeSequenceNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMNewSessionNotification *newSessionNotification NS_RETURNS_NOT_RETAINED;
/** Test to see if @c newSessionNotification has been set. */
@property(nonatomic, readwrite) BOOL hasNewSessionNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMTerminateSessionNotification *terminateSessionNotification;
/** Test to see if @c terminateSessionNotification has been set. */
@property(nonatomic, readwrite) BOOL hasTerminateSessionNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMLayoutChangedNotification *layoutChangedNotification;
/** Test to see if @c layoutChangedNotification has been set. */
@property(nonatomic, readwrite) BOOL hasLayoutChangedNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMFocusChangedNotification *focusChangedNotification;
/** Test to see if @c focusChangedNotification has been set. */
@property(nonatomic, readwrite) BOOL hasFocusChangedNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMServerOriginatedRPCNotification *serverOriginatedRpcNotification;
/** Test to see if @c serverOriginatedRpcNotification has been set. */
@property(nonatomic, readwrite) BOOL hasServerOriginatedRpcNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMBroadcastDomainsChangedNotification *broadcastDomainsChanged;
/** Test to see if @c broadcastDomainsChanged has been set. */
@property(nonatomic, readwrite) BOOL hasBroadcastDomainsChanged;

@property(nonatomic, readwrite, strong, null_resettable) ITMVariableChangedNotification *variableChangedNotification;
/** Test to see if @c variableChangedNotification has been set. */
@property(nonatomic, readwrite) BOOL hasVariableChangedNotification;

@property(nonatomic, readwrite, strong, null_resettable) ITMProfileChangedNotification *profileChangedNotification;
/** Test to see if @c profileChangedNotification has been set. */
@property(nonatomic, readwrite) BOOL hasProfileChangedNotification;

@end

#pragma mark - ITMProfileChangedNotification

typedef GPB_ENUM(ITMProfileChangedNotification_FieldNumber) {
  ITMProfileChangedNotification_FieldNumber_Guid = 1,
};

@interface ITMProfileChangedNotification : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *guid;
/** Test to see if @c guid has been set. */
@property(nonatomic, readwrite) BOOL hasGuid;

@end

#pragma mark - ITMVariableChangedNotification

typedef GPB_ENUM(ITMVariableChangedNotification_FieldNumber) {
  ITMVariableChangedNotification_FieldNumber_Scope = 1,
  ITMVariableChangedNotification_FieldNumber_Identifier = 2,
  ITMVariableChangedNotification_FieldNumber_Name = 3,
  ITMVariableChangedNotification_FieldNumber_JsonNewValue = 4,
};

@interface ITMVariableChangedNotification : GPBMessage

@property(nonatomic, readwrite) ITMVariableScope scope;

@property(nonatomic, readwrite) BOOL hasScope;
/** unset if app scope, otherwise is session, window, or tab ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;
/** Test to see if @c identifier has been set. */
@property(nonatomic, readwrite) BOOL hasIdentifier;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/** Will be "null" if unset. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonNewValue;
/** Test to see if @c jsonNewValue has been set. */
@property(nonatomic, readwrite) BOOL hasJsonNewValue;

@end

#pragma mark - ITMBroadcastDomainsChangedNotification

typedef GPB_ENUM(ITMBroadcastDomainsChangedNotification_FieldNumber) {
  ITMBroadcastDomainsChangedNotification_FieldNumber_BroadcastDomainsArray = 1,
};

@interface ITMBroadcastDomainsChangedNotification : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMBroadcastDomain*> *broadcastDomainsArray;
/** The number of items in @c broadcastDomainsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger broadcastDomainsArray_Count;

@end

#pragma mark - ITMServerOriginatedRPC

typedef GPB_ENUM(ITMServerOriginatedRPC_FieldNumber) {
  ITMServerOriginatedRPC_FieldNumber_Name = 2,
  ITMServerOriginatedRPC_FieldNumber_ArgumentsArray = 3,
};

@interface ITMServerOriginatedRPC : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMServerOriginatedRPC_RPCArgument*> *argumentsArray;
/** The number of items in @c argumentsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger argumentsArray_Count;

@end

#pragma mark - ITMServerOriginatedRPC_RPCArgument

typedef GPB_ENUM(ITMServerOriginatedRPC_RPCArgument_FieldNumber) {
  ITMServerOriginatedRPC_RPCArgument_FieldNumber_Name = 1,
  ITMServerOriginatedRPC_RPCArgument_FieldNumber_JsonValue = 2,
};

@interface ITMServerOriginatedRPC_RPCArgument : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonValue;
/** Test to see if @c jsonValue has been set. */
@property(nonatomic, readwrite) BOOL hasJsonValue;

@end

#pragma mark - ITMServerOriginatedRPCNotification

typedef GPB_ENUM(ITMServerOriginatedRPCNotification_FieldNumber) {
  ITMServerOriginatedRPCNotification_FieldNumber_RequestId = 1,
  ITMServerOriginatedRPCNotification_FieldNumber_Rpc = 2,
};

/**
 * This is an iTerm2-to-script RPC call. The script must have registered for
 * an RPC matching the signature of `rpc`.
 **/
@interface ITMServerOriginatedRPCNotification : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *requestId;
/** Test to see if @c requestId has been set. */
@property(nonatomic, readwrite) BOOL hasRequestId;

@property(nonatomic, readwrite, strong, null_resettable) ITMServerOriginatedRPC *rpc;
/** Test to see if @c rpc has been set. */
@property(nonatomic, readwrite) BOOL hasRpc;

@end

#pragma mark - ITMKeystrokeNotification

typedef GPB_ENUM(ITMKeystrokeNotification_FieldNumber) {
  ITMKeystrokeNotification_FieldNumber_Characters = 1,
  ITMKeystrokeNotification_FieldNumber_CharactersIgnoringModifiers = 2,
  ITMKeystrokeNotification_FieldNumber_ModifiersArray = 3,
  ITMKeystrokeNotification_FieldNumber_KeyCode = 4,
  ITMKeystrokeNotification_FieldNumber_Session = 5,
};

@interface ITMKeystrokeNotification : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *characters;
/** Test to see if @c characters has been set. */
@property(nonatomic, readwrite) BOOL hasCharacters;

@property(nonatomic, readwrite, copy, null_resettable) NSString *charactersIgnoringModifiers;
/** Test to see if @c charactersIgnoringModifiers has been set. */
@property(nonatomic, readwrite) BOOL hasCharactersIgnoringModifiers;

// |modifiersArray| contains |ITMModifiers|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *modifiersArray;
/** The number of items in @c modifiersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger modifiersArray_Count;

@property(nonatomic, readwrite) int32_t keyCode;

@property(nonatomic, readwrite) BOOL hasKeyCode;
@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

@end

#pragma mark - ITMScreenUpdateNotification

typedef GPB_ENUM(ITMScreenUpdateNotification_FieldNumber) {
  ITMScreenUpdateNotification_FieldNumber_Session = 1,
};

@interface ITMScreenUpdateNotification : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

@end

#pragma mark - ITMPromptNotification

typedef GPB_ENUM(ITMPromptNotification_FieldNumber) {
  ITMPromptNotification_FieldNumber_Session = 1,
};

@interface ITMPromptNotification : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

@end

#pragma mark - ITMLocationChangeNotification

typedef GPB_ENUM(ITMLocationChangeNotification_FieldNumber) {
  ITMLocationChangeNotification_FieldNumber_HostName = 1,
  ITMLocationChangeNotification_FieldNumber_UserName = 2,
  ITMLocationChangeNotification_FieldNumber_Directory = 3,
  ITMLocationChangeNotification_FieldNumber_Session = 4,
};

@interface ITMLocationChangeNotification : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *hostName;
/** Test to see if @c hostName has been set. */
@property(nonatomic, readwrite) BOOL hasHostName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *userName;
/** Test to see if @c userName has been set. */
@property(nonatomic, readwrite) BOOL hasUserName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *directory;
/** Test to see if @c directory has been set. */
@property(nonatomic, readwrite) BOOL hasDirectory;

@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

@end

#pragma mark - ITMCustomEscapeSequenceNotification

typedef GPB_ENUM(ITMCustomEscapeSequenceNotification_FieldNumber) {
  ITMCustomEscapeSequenceNotification_FieldNumber_Session = 1,
  ITMCustomEscapeSequenceNotification_FieldNumber_SenderIdentity = 2,
  ITMCustomEscapeSequenceNotification_FieldNumber_Payload = 3,
};

/**
 * OSC 1337 ; Custom=id=<identity>:<payload> ST
 **/
@interface ITMCustomEscapeSequenceNotification : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

@property(nonatomic, readwrite, copy, null_resettable) NSString *senderIdentity;
/** Test to see if @c senderIdentity has been set. */
@property(nonatomic, readwrite) BOOL hasSenderIdentity;

@property(nonatomic, readwrite, copy, null_resettable) NSString *payload;
/** Test to see if @c payload has been set. */
@property(nonatomic, readwrite) BOOL hasPayload;

@end

#pragma mark - ITMNewSessionNotification

typedef GPB_ENUM(ITMNewSessionNotification_FieldNumber) {
  ITMNewSessionNotification_FieldNumber_UniqueIdentifier = 1,
};

/**
 * Sent when a new session is created or a closure is undone.
 **/
@interface ITMNewSessionNotification : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *uniqueIdentifier;
/** Test to see if @c uniqueIdentifier has been set. */
@property(nonatomic, readwrite) BOOL hasUniqueIdentifier;

@end

#pragma mark - ITMFocusChangedNotification

typedef GPB_ENUM(ITMFocusChangedNotification_FieldNumber) {
  ITMFocusChangedNotification_FieldNumber_ApplicationActive = 1,
  ITMFocusChangedNotification_FieldNumber_Window = 2,
  ITMFocusChangedNotification_FieldNumber_SelectedTab = 3,
  ITMFocusChangedNotification_FieldNumber_Session = 4,
};

typedef GPB_ENUM(ITMFocusChangedNotification_Event_OneOfCase) {
  ITMFocusChangedNotification_Event_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMFocusChangedNotification_Event_OneOfCase_ApplicationActive = 1,
  ITMFocusChangedNotification_Event_OneOfCase_Window = 2,
  ITMFocusChangedNotification_Event_OneOfCase_SelectedTab = 3,
  ITMFocusChangedNotification_Event_OneOfCase_Session = 4,
};

/**
 * Note this is sent when the app becomes/resigns active, the key window changes, the selected tab
 * of a window changes, or the active pane of a tab changes. Note that you may receive duplicate
 * notifications at times. Ignore those that do not signify a change.
 **/
@interface ITMFocusChangedNotification : GPBMessage

@property(nonatomic, readonly) ITMFocusChangedNotification_Event_OneOfCase eventOneOfCase;

/** true: application became active. false: application resigned active. */
@property(nonatomic, readwrite) BOOL applicationActive;

/** If set, gives info about a change to window focus. */
@property(nonatomic, readwrite, strong, null_resettable) ITMFocusChangedNotification_Window *window;

/** If set, selected tab changed to the one identified herein. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *selectedTab;

/** If set, the given session became active in its tab. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *session;

@end

/**
 * Clears whatever value was set for the oneof 'event'.
 **/
void ITMFocusChangedNotification_ClearEventOneOfCase(ITMFocusChangedNotification *message);

#pragma mark - ITMFocusChangedNotification_Window

typedef GPB_ENUM(ITMFocusChangedNotification_Window_FieldNumber) {
  ITMFocusChangedNotification_Window_FieldNumber_WindowStatus = 1,
  ITMFocusChangedNotification_Window_FieldNumber_WindowId = 2,
};

@interface ITMFocusChangedNotification_Window : GPBMessage

/** Describes how to interpret window_id. */
@property(nonatomic, readwrite) ITMFocusChangedNotification_Window_WindowStatus windowStatus;

@property(nonatomic, readwrite) BOOL hasWindowStatus;
/** The affected window_id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *windowId;
/** Test to see if @c windowId has been set. */
@property(nonatomic, readwrite) BOOL hasWindowId;

@end

#pragma mark - ITMTerminateSessionNotification

typedef GPB_ENUM(ITMTerminateSessionNotification_FieldNumber) {
  ITMTerminateSessionNotification_FieldNumber_UniqueIdentifier = 1,
};

/**
 * Note this is sent when a session is removed from the screen but its closure remains undoable.
 **/
@interface ITMTerminateSessionNotification : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *uniqueIdentifier;
/** Test to see if @c uniqueIdentifier has been set. */
@property(nonatomic, readwrite) BOOL hasUniqueIdentifier;

@end

#pragma mark - ITMLayoutChangedNotification

typedef GPB_ENUM(ITMLayoutChangedNotification_FieldNumber) {
  ITMLayoutChangedNotification_FieldNumber_ListSessionsResponse = 1,
};

@interface ITMLayoutChangedNotification : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ITMListSessionsResponse *listSessionsResponse;
/** Test to see if @c listSessionsResponse has been set. */
@property(nonatomic, readwrite) BOOL hasListSessionsResponse;

@end

#pragma mark - ITMGetBufferRequest

typedef GPB_ENUM(ITMGetBufferRequest_FieldNumber) {
  ITMGetBufferRequest_FieldNumber_Session = 1,
  ITMGetBufferRequest_FieldNumber_LineRange = 2,
};

/**
 * Requests the contents of a range of lines.
 **/
@interface ITMGetBufferRequest : GPBMessage

/** See documentation on session IDs. "all" not accepted. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

/** Which lines to return? */
@property(nonatomic, readwrite, strong, null_resettable) ITMLineRange *lineRange;
/** Test to see if @c lineRange has been set. */
@property(nonatomic, readwrite) BOOL hasLineRange;

@end

#pragma mark - ITMGetBufferResponse

typedef GPB_ENUM(ITMGetBufferResponse_FieldNumber) {
  ITMGetBufferResponse_FieldNumber_Status = 1,
  ITMGetBufferResponse_FieldNumber_Range = 2,
  ITMGetBufferResponse_FieldNumber_ContentsArray = 3,
  ITMGetBufferResponse_FieldNumber_Cursor = 4,
  ITMGetBufferResponse_FieldNumber_NumLinesAboveScreen = 5,
  ITMGetBufferResponse_FieldNumber_WindowedCoordRange = 6,
};

/**
 * Contains the contents of a range of lines.
 **/
@interface ITMGetBufferResponse : GPBMessage

@property(nonatomic, readwrite) ITMGetBufferResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
/** Which lines were returned */
@property(nonatomic, readwrite, strong, null_resettable) ITMRange *range DEPRECATED_ATTRIBUTE;
/** Test to see if @c range has been set. */
@property(nonatomic, readwrite) BOOL hasRange DEPRECATED_ATTRIBUTE;

/** Those lines' contents. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMLineContents*> *contentsArray;
/** The number of items in @c contentsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger contentsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) ITMCoord *cursor;
/** Test to see if @c cursor has been set. */
@property(nonatomic, readwrite) BOOL hasCursor;

/**
 * The number of lines (including lines lost from the head of scrollback history) that precede
 * the screen. Subtract this from cursor.y to get the cursor's position on the screen when it
 * is scrolled to the bottom.
 **/
@property(nonatomic, readwrite) int64_t numLinesAboveScreen DEPRECATED_ATTRIBUTE;

@property(nonatomic, readwrite) BOOL hasNumLinesAboveScreen DEPRECATED_ATTRIBUTE;
/** The returned range */
@property(nonatomic, readwrite, strong, null_resettable) ITMWindowedCoordRange *windowedCoordRange;
/** Test to see if @c windowedCoordRange has been set. */
@property(nonatomic, readwrite) BOOL hasWindowedCoordRange;

@end

#pragma mark - ITMGetPromptRequest

typedef GPB_ENUM(ITMGetPromptRequest_FieldNumber) {
  ITMGetPromptRequest_FieldNumber_Session = 1,
};

/**
 * Requests metadata about the current shell prompt.
 **/
@interface ITMGetPromptRequest : GPBMessage

/** See documentation on session IDs. "all" not accepted. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

@end

#pragma mark - ITMGetPromptResponse

typedef GPB_ENUM(ITMGetPromptResponse_FieldNumber) {
  ITMGetPromptResponse_FieldNumber_Status = 1,
  ITMGetPromptResponse_FieldNumber_PromptRange = 2,
  ITMGetPromptResponse_FieldNumber_CommandRange = 3,
  ITMGetPromptResponse_FieldNumber_OutputRange = 4,
  ITMGetPromptResponse_FieldNumber_WorkingDirectory = 5,
  ITMGetPromptResponse_FieldNumber_Command = 6,
};

/**
 * Reponds with metadata about the current shell prompt, if possible.
 **/
@interface ITMGetPromptResponse : GPBMessage

@property(nonatomic, readwrite) ITMGetPromptResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@property(nonatomic, readwrite, strong, null_resettable) ITMCoordRange *promptRange;
/** Test to see if @c promptRange has been set. */
@property(nonatomic, readwrite) BOOL hasPromptRange;

@property(nonatomic, readwrite, strong, null_resettable) ITMCoordRange *commandRange;
/** Test to see if @c commandRange has been set. */
@property(nonatomic, readwrite) BOOL hasCommandRange;

@property(nonatomic, readwrite, strong, null_resettable) ITMCoordRange *outputRange;
/** Test to see if @c outputRange has been set. */
@property(nonatomic, readwrite) BOOL hasOutputRange;

@property(nonatomic, readwrite, copy, null_resettable) NSString *workingDirectory;
/** Test to see if @c workingDirectory has been set. */
@property(nonatomic, readwrite) BOOL hasWorkingDirectory;

@property(nonatomic, readwrite, copy, null_resettable) NSString *command;
/** Test to see if @c command has been set. */
@property(nonatomic, readwrite) BOOL hasCommand;

@end

#pragma mark - ITMGetProfilePropertyRequest

typedef GPB_ENUM(ITMGetProfilePropertyRequest_FieldNumber) {
  ITMGetProfilePropertyRequest_FieldNumber_Session = 1,
  ITMGetProfilePropertyRequest_FieldNumber_KeysArray = 2,
};

@interface ITMGetProfilePropertyRequest : GPBMessage

/** See documentation on session IDs */
@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

/** If not set, all properties will be returned */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *keysArray;
/** The number of items in @c keysArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger keysArray_Count;

@end

#pragma mark - ITMProfileProperty

typedef GPB_ENUM(ITMProfileProperty_FieldNumber) {
  ITMProfileProperty_FieldNumber_Key = 1,
  ITMProfileProperty_FieldNumber_JsonValue = 2,
};

@interface ITMProfileProperty : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonValue;
/** Test to see if @c jsonValue has been set. */
@property(nonatomic, readwrite) BOOL hasJsonValue;

@end

#pragma mark - ITMGetProfilePropertyResponse

typedef GPB_ENUM(ITMGetProfilePropertyResponse_FieldNumber) {
  ITMGetProfilePropertyResponse_FieldNumber_Status = 1,
  ITMGetProfilePropertyResponse_FieldNumber_PropertiesArray = 3,
};

@interface ITMGetProfilePropertyResponse : GPBMessage

@property(nonatomic, readwrite) ITMGetProfilePropertyResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMProfileProperty*> *propertiesArray;
/** The number of items in @c propertiesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger propertiesArray_Count;

@end

#pragma mark - ITMSetProfilePropertyRequest

typedef GPB_ENUM(ITMSetProfilePropertyRequest_FieldNumber) {
  ITMSetProfilePropertyRequest_FieldNumber_Session = 1,
  ITMSetProfilePropertyRequest_FieldNumber_GuidList = 2,
  ITMSetProfilePropertyRequest_FieldNumber_Key = 3,
  ITMSetProfilePropertyRequest_FieldNumber_JsonValue = 4,
};

typedef GPB_ENUM(ITMSetProfilePropertyRequest_Target_OneOfCase) {
  ITMSetProfilePropertyRequest_Target_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMSetProfilePropertyRequest_Target_OneOfCase_Session = 1,
  ITMSetProfilePropertyRequest_Target_OneOfCase_GuidList = 2,
};

/**
 * Sets a value in a session's copy of the profile without modifying the underlying profile.
 **/
@interface ITMSetProfilePropertyRequest : GPBMessage

@property(nonatomic, readonly) ITMSetProfilePropertyRequest_Target_OneOfCase targetOneOfCase;

/** See documentation on session IDs */
@property(nonatomic, readwrite, copy, null_resettable) NSString *session;

@property(nonatomic, readwrite, strong, null_resettable) ITMSetProfilePropertyRequest_GuidList *guidList;

/**
 *
 * Color dictionaries have these mandatory keys taking numeric values between 0 and 1:
 *   Red Component, Green Component, Blue Component
 * And an optional key with a value in 0 to 1:
 *   Alpha Component
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

/**
 * Does not need to be a dictionary. Here are examples of JSON protos having JSON values:
 * Numeric example:
 *   "json_value": "0.5"
 * String example:
 *   "json_value": "\\"Hello world\\""
 * Color example:
 *   "json_value": "{\\"Red Component\\": 1, \\"Green Component\\": 0, \\"Blue Component\\": 0, \\"Alpha Component\\": 1}"
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *jsonValue;
/** Test to see if @c jsonValue has been set. */
@property(nonatomic, readwrite) BOOL hasJsonValue;

@end

/**
 * Clears whatever value was set for the oneof 'target'.
 **/
void ITMSetProfilePropertyRequest_ClearTargetOneOfCase(ITMSetProfilePropertyRequest *message);

#pragma mark - ITMSetProfilePropertyRequest_GuidList

typedef GPB_ENUM(ITMSetProfilePropertyRequest_GuidList_FieldNumber) {
  ITMSetProfilePropertyRequest_GuidList_FieldNumber_GuidsArray = 1,
};

@interface ITMSetProfilePropertyRequest_GuidList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *guidsArray;
/** The number of items in @c guidsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger guidsArray_Count;

@end

#pragma mark - ITMSetProfilePropertyResponse

typedef GPB_ENUM(ITMSetProfilePropertyResponse_FieldNumber) {
  ITMSetProfilePropertyResponse_FieldNumber_Status = 1,
};

@interface ITMSetProfilePropertyResponse : GPBMessage

@property(nonatomic, readwrite) ITMSetProfilePropertyResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMTransactionRequest

typedef GPB_ENUM(ITMTransactionRequest_FieldNumber) {
  ITMTransactionRequest_FieldNumber_Begin = 1,
};

@interface ITMTransactionRequest : GPBMessage

/**
 * Set to true to begin a new transaction or false to end the current
 * transaction. The app's main loop will not advance while in a
 * transaction. This effectively freezes time. Keep transactions short.
 **/
@property(nonatomic, readwrite) BOOL begin;

@property(nonatomic, readwrite) BOOL hasBegin;
@end

#pragma mark - ITMTransactionResponse

typedef GPB_ENUM(ITMTransactionResponse_FieldNumber) {
  ITMTransactionResponse_FieldNumber_Status = 1,
};

@interface ITMTransactionResponse : GPBMessage

@property(nonatomic, readwrite) ITMTransactionResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMLineRange

typedef GPB_ENUM(ITMLineRange_FieldNumber) {
  ITMLineRange_FieldNumber_ScreenContentsOnly = 1,
  ITMLineRange_FieldNumber_TrailingLines = 2,
  ITMLineRange_FieldNumber_WindowedCoordRange = 3,
};

/**
 * Describes a range of lines.
 **/
@interface ITMLineRange : GPBMessage

/**
 * Only one of these fields should be set:
 * ---------------------------------------
 * Return just the current contents of the screen.
 **/
@property(nonatomic, readwrite) BOOL screenContentsOnly;

@property(nonatomic, readwrite) BOOL hasScreenContentsOnly;
/**
 * Return the last `trailing lines` of the buffer, which could go back into
 * scrollback history.
 **/
@property(nonatomic, readwrite) int32_t trailingLines;

@property(nonatomic, readwrite) BOOL hasTrailingLines;
@property(nonatomic, readwrite, strong, null_resettable) ITMWindowedCoordRange *windowedCoordRange;
/** Test to see if @c windowedCoordRange has been set. */
@property(nonatomic, readwrite) BOOL hasWindowedCoordRange;

@end

#pragma mark - ITMRange

typedef GPB_ENUM(ITMRange_FieldNumber) {
  ITMRange_FieldNumber_Location = 1,
  ITMRange_FieldNumber_Length = 2,
};

/**
 * Describes a range of values.
 **/
@interface ITMRange : GPBMessage

@property(nonatomic, readwrite) int64_t location;

@property(nonatomic, readwrite) BOOL hasLocation;
@property(nonatomic, readwrite) int64_t length;

@property(nonatomic, readwrite) BOOL hasLength;
@end

#pragma mark - ITMCoordRange

typedef GPB_ENUM(ITMCoordRange_FieldNumber) {
  ITMCoordRange_FieldNumber_Start = 1,
  ITMCoordRange_FieldNumber_End = 2,
};

/**
 * Describes a range of cells.
 * |..xxxxx|
 * |xxxx...|
 * In the example above, the range of x's is: {start: {x:2, y:0}, end: {x:4, y:1}}
 * The end coordinate is the first cell *after* the end of the range described (so an empty range
 * has start == end)
 **/
@interface ITMCoordRange : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ITMCoord *start;
/** Test to see if @c start has been set. */
@property(nonatomic, readwrite) BOOL hasStart;

@property(nonatomic, readwrite, strong, null_resettable) ITMCoord *end;
/** Test to see if @c end has been set. */
@property(nonatomic, readwrite) BOOL hasEnd;

@end

#pragma mark - ITMCoord

typedef GPB_ENUM(ITMCoord_FieldNumber) {
  ITMCoord_FieldNumber_X = 1,
  ITMCoord_FieldNumber_Y = 2,
};

/**
 * Describes a cell's location.
 **/
@interface ITMCoord : GPBMessage

@property(nonatomic, readwrite) int32_t x;

@property(nonatomic, readwrite) BOOL hasX;
/**
 * y=0 describes the first line. When the scrollback buffer is full and history is lost, the first
 * lines become unavailable, but the numbering is stable (so the Nth line is always the Nth line,
 * even if it's not the Nth *visible* line).
 **/
@property(nonatomic, readwrite) int64_t y;

@property(nonatomic, readwrite) BOOL hasY;
@end

#pragma mark - ITMLineContents

typedef GPB_ENUM(ITMLineContents_FieldNumber) {
  ITMLineContents_FieldNumber_Text = 1,
  ITMLineContents_FieldNumber_CodePointsPerCellArray = 2,
  ITMLineContents_FieldNumber_Continuation = 3,
};

/**
 * Describes the content of a line.
 **/
@interface ITMLineContents : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

/**
 * Some cells do not contain one code point. Use this to map code points in
 * `text` to a screen position. If the line has no uninitialized cells at its end, then the
 * sum of `repeats` equals the width of the display.
 *
 * For example, consider a line of text that appears on your display like:
 *   xyz compañía
 *
 * The corresponding value of `text` would be:
 *   xyzcompan~i'a
 * Note: ~ and ' are combining marks, but are shown uncombined for illustrative purposes.
 *
 * Each code point in "xyz" as well as each of the non-accented letters in compañía takes one
 * cell.
 *
 * The blank following 'z' is an uninitialized cell that has no code points,
 * so the z and the c in `text` are adjacent. It's unusual for these to occur in the middle
 * of a line, but it is possible.
 *
 * The ñ is composed of the letter n and a combining tilde (U+0303) (indicated in our example
 * as ~), while í is composed of the leter i and a combining acute accent (U+0301) (indicated in
 * our example as ').
 *
 * To map code points in `text` to screen positions, `code_points_per_cell`
 * provides the number of code points in each cell. In our example you would
 * get:
 *
 *   num_code_points=1, repeats=3     // x, y, z
 *   num_code_points=0, repeats=1     // uninitialized cell
 *   num_code_points=1, repeats=5     // c, o, m, p, a
 *   num_code_points=2, repeats=2     // n + combining tilde, i + combining acute accent
 *   num_code_points=1, repeats=1     // a
 *
 * Lines usually end with a series of uninitialized cells. These are not included.
 *
 * Here is psuedocode to interpret code_points_per_cell:
 *
 *   text_index_to_screen_coord = {}
 *   screen_coord_to_text_index = {}
 *   text_index = 0
 *   screen_coord = 0
 *   for cpps in code_points_per_cell:
 *     repeat cpps.repeats times:
 *       text_index_to_screen_coord[text_index] = screen_coord
 *       screen_coord_to_text_index[screen_coord] = text_index
 *       text_index += cpps.num_code_points
 *       screen_coord += 1
 *
 * Cells with images are omitted.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMCodePointsPerCell*> *codePointsPerCellArray;
/** The number of items in @c codePointsPerCellArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger codePointsPerCellArray_Count;

@property(nonatomic, readwrite) ITMLineContents_Continuation continuation;

@property(nonatomic, readwrite) BOOL hasContinuation;
@end

#pragma mark - ITMCodePointsPerCell

typedef GPB_ENUM(ITMCodePointsPerCell_FieldNumber) {
  ITMCodePointsPerCell_FieldNumber_NumCodePoints = 1,
  ITMCodePointsPerCell_FieldNumber_Repeats = 2,
};

@interface ITMCodePointsPerCell : GPBMessage

/** Number of code points per cell */
@property(nonatomic, readwrite) int32_t numCodePoints;

@property(nonatomic, readwrite) BOOL hasNumCodePoints;
/** Number of adjacent cells with this number of code points (always one or more). */
@property(nonatomic, readwrite) int32_t repeats;

@property(nonatomic, readwrite) BOOL hasRepeats;
@end

#pragma mark - ITMListSessionsRequest

@interface ITMListSessionsRequest : GPBMessage

@end

#pragma mark - ITMSendTextRequest

typedef GPB_ENUM(ITMSendTextRequest_FieldNumber) {
  ITMSendTextRequest_FieldNumber_Session = 1,
  ITMSendTextRequest_FieldNumber_Text = 2,
  ITMSendTextRequest_FieldNumber_SuppressBroadcast = 3,
};

@interface ITMSendTextRequest : GPBMessage

/** See documentation on session IDs */
@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

/**
 * The text to send. As usual for proto buffers, this should be UTF-8
 * encoded. It will be converted to the session's encoding before being sent.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

/** If set, input will not be broadcast when broadcasting is on. */
@property(nonatomic, readwrite) BOOL suppressBroadcast;

@property(nonatomic, readwrite) BOOL hasSuppressBroadcast;
@end

#pragma mark - ITMSendTextResponse

typedef GPB_ENUM(ITMSendTextResponse_FieldNumber) {
  ITMSendTextResponse_FieldNumber_Status = 1,
};

@interface ITMSendTextResponse : GPBMessage

@property(nonatomic, readwrite) ITMSendTextResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ITMSize

typedef GPB_ENUM(ITMSize_FieldNumber) {
  ITMSize_FieldNumber_Width = 1,
  ITMSize_FieldNumber_Height = 2,
};

@interface ITMSize : GPBMessage

@property(nonatomic, readwrite) int32_t width;

@property(nonatomic, readwrite) BOOL hasWidth;
@property(nonatomic, readwrite) int32_t height;

@property(nonatomic, readwrite) BOOL hasHeight;
@end

#pragma mark - ITMPoint

typedef GPB_ENUM(ITMPoint_FieldNumber) {
  ITMPoint_FieldNumber_X = 1,
  ITMPoint_FieldNumber_Y = 2,
};

@interface ITMPoint : GPBMessage

@property(nonatomic, readwrite) int32_t x;

@property(nonatomic, readwrite) BOOL hasX;
@property(nonatomic, readwrite) int32_t y;

@property(nonatomic, readwrite) BOOL hasY;
@end

#pragma mark - ITMFrame

typedef GPB_ENUM(ITMFrame_FieldNumber) {
  ITMFrame_FieldNumber_Origin = 1,
  ITMFrame_FieldNumber_Size = 2,
};

@interface ITMFrame : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ITMPoint *origin;
/** Test to see if @c origin has been set. */
@property(nonatomic, readwrite) BOOL hasOrigin;

@property(nonatomic, readwrite, strong, null_resettable) ITMSize *size;
/** Test to see if @c size has been set. */
@property(nonatomic, readwrite) BOOL hasSize;

@end

#pragma mark - ITMSessionSummary

typedef GPB_ENUM(ITMSessionSummary_FieldNumber) {
  ITMSessionSummary_FieldNumber_UniqueIdentifier = 1,
  ITMSessionSummary_FieldNumber_Frame = 2,
  ITMSessionSummary_FieldNumber_GridSize = 3,
  ITMSessionSummary_FieldNumber_Title = 4,
};

@interface ITMSessionSummary : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *uniqueIdentifier;
/** Test to see if @c uniqueIdentifier has been set. */
@property(nonatomic, readwrite) BOOL hasUniqueIdentifier;

/** will not be set for buried sessions */
@property(nonatomic, readwrite, strong, null_resettable) ITMFrame *frame;
/** Test to see if @c frame has been set. */
@property(nonatomic, readwrite) BOOL hasFrame;

/** will not be set for buried sessions */
@property(nonatomic, readwrite, strong, null_resettable) ITMSize *gridSize;
/** Test to see if @c gridSize has been set. */
@property(nonatomic, readwrite) BOOL hasGridSize;

@property(nonatomic, readwrite, copy, null_resettable) NSString *title;
/** Test to see if @c title has been set. */
@property(nonatomic, readwrite) BOOL hasTitle;

@end

#pragma mark - ITMSplitTreeNode

typedef GPB_ENUM(ITMSplitTreeNode_FieldNumber) {
  ITMSplitTreeNode_FieldNumber_Vertical = 1,
  ITMSplitTreeNode_FieldNumber_LinksArray = 2,
};

@interface ITMSplitTreeNode : GPBMessage

/** Direction of split pane divider */
@property(nonatomic, readwrite) BOOL vertical;

@property(nonatomic, readwrite) BOOL hasVertical;
/** Links to children */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMSplitTreeNode_SplitTreeLink*> *linksArray;
/** The number of items in @c linksArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger linksArray_Count;

@end

#pragma mark - ITMSplitTreeNode_SplitTreeLink

typedef GPB_ENUM(ITMSplitTreeNode_SplitTreeLink_FieldNumber) {
  ITMSplitTreeNode_SplitTreeLink_FieldNumber_Session = 1,
  ITMSplitTreeNode_SplitTreeLink_FieldNumber_Node = 2,
};

typedef GPB_ENUM(ITMSplitTreeNode_SplitTreeLink_Child_OneOfCase) {
  ITMSplitTreeNode_SplitTreeLink_Child_OneOfCase_GPBUnsetOneOfCase = 0,
  ITMSplitTreeNode_SplitTreeLink_Child_OneOfCase_Session = 1,
  ITMSplitTreeNode_SplitTreeLink_Child_OneOfCase_Node = 2,
};

@interface ITMSplitTreeNode_SplitTreeLink : GPBMessage

@property(nonatomic, readonly) ITMSplitTreeNode_SplitTreeLink_Child_OneOfCase childOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ITMSessionSummary *session;

@property(nonatomic, readwrite, strong, null_resettable) ITMSplitTreeNode *node;

@end

/**
 * Clears whatever value was set for the oneof 'child'.
 **/
void ITMSplitTreeNode_SplitTreeLink_ClearChildOneOfCase(ITMSplitTreeNode_SplitTreeLink *message);

#pragma mark - ITMListSessionsResponse

typedef GPB_ENUM(ITMListSessionsResponse_FieldNumber) {
  ITMListSessionsResponse_FieldNumber_WindowsArray = 1,
  ITMListSessionsResponse_FieldNumber_BuriedSessionsArray = 2,
};

@interface ITMListSessionsResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMListSessionsResponse_Window*> *windowsArray;
/** The number of items in @c windowsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger windowsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMSessionSummary*> *buriedSessionsArray;
/** The number of items in @c buriedSessionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger buriedSessionsArray_Count;

@end

#pragma mark - ITMListSessionsResponse_Window

typedef GPB_ENUM(ITMListSessionsResponse_Window_FieldNumber) {
  ITMListSessionsResponse_Window_FieldNumber_TabsArray = 1,
  ITMListSessionsResponse_Window_FieldNumber_WindowId = 2,
  ITMListSessionsResponse_Window_FieldNumber_Frame = 3,
  ITMListSessionsResponse_Window_FieldNumber_Number = 4,
};

@interface ITMListSessionsResponse_Window : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMListSessionsResponse_Tab*> *tabsArray;
/** The number of items in @c tabsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger tabsArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *windowId;
/** Test to see if @c windowId has been set. */
@property(nonatomic, readwrite) BOOL hasWindowId;

@property(nonatomic, readwrite, strong, null_resettable) ITMFrame *frame;
/** Test to see if @c frame has been set. */
@property(nonatomic, readwrite) BOOL hasFrame;

@property(nonatomic, readwrite) int32_t number;

@property(nonatomic, readwrite) BOOL hasNumber;
@end

#pragma mark - ITMListSessionsResponse_Tab

typedef GPB_ENUM(ITMListSessionsResponse_Tab_FieldNumber) {
  ITMListSessionsResponse_Tab_FieldNumber_TabId = 2,
  ITMListSessionsResponse_Tab_FieldNumber_Root = 3,
  ITMListSessionsResponse_Tab_FieldNumber_TmuxWindowId = 4,
  ITMListSessionsResponse_Tab_FieldNumber_TmuxConnectionId = 5,
};

@interface ITMListSessionsResponse_Tab : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ITMSplitTreeNode *root;
/** Test to see if @c root has been set. */
@property(nonatomic, readwrite) BOOL hasRoot;

@property(nonatomic, readwrite, copy, null_resettable) NSString *tabId;
/** Test to see if @c tabId has been set. */
@property(nonatomic, readwrite) BOOL hasTabId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *tmuxWindowId;
/** Test to see if @c tmuxWindowId has been set. */
@property(nonatomic, readwrite) BOOL hasTmuxWindowId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *tmuxConnectionId;
/** Test to see if @c tmuxConnectionId has been set. */
@property(nonatomic, readwrite) BOOL hasTmuxConnectionId;

@end

#pragma mark - ITMCreateTabRequest

typedef GPB_ENUM(ITMCreateTabRequest_FieldNumber) {
  ITMCreateTabRequest_FieldNumber_ProfileName = 1,
  ITMCreateTabRequest_FieldNumber_WindowId = 2,
  ITMCreateTabRequest_FieldNumber_TabIndex = 3,
  ITMCreateTabRequest_FieldNumber_Command = 4,
  ITMCreateTabRequest_FieldNumber_CustomProfilePropertiesArray = 5,
};

@interface ITMCreateTabRequest : GPBMessage

/** Leave unset to use the default profile. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *profileName;
/** Test to see if @c profileName has been set. */
@property(nonatomic, readwrite) BOOL hasProfileName;

/** Leave unset to create the tab in a new window. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *windowId;
/** Test to see if @c windowId has been set. */
@property(nonatomic, readwrite) BOOL hasWindowId;

/** Valid to set only if window_id is set. Gives the desired index of the new tab. */
@property(nonatomic, readwrite) uint32_t tabIndex;

@property(nonatomic, readwrite) BOOL hasTabIndex;
/** If not set, the profile's command will be used. Use custom_profile_properties instead. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *command DEPRECATED_ATTRIBUTE;
/** Test to see if @c command has been set. */
@property(nonatomic, readwrite) BOOL hasCommand DEPRECATED_ATTRIBUTE;

/** Modifies the profile to customize its behavior just for this session. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMProfileProperty*> *customProfilePropertiesArray;
/** The number of items in @c customProfilePropertiesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger customProfilePropertiesArray_Count;

@end

#pragma mark - ITMCreateTabResponse

typedef GPB_ENUM(ITMCreateTabResponse_FieldNumber) {
  ITMCreateTabResponse_FieldNumber_Status = 1,
  ITMCreateTabResponse_FieldNumber_WindowId = 2,
  ITMCreateTabResponse_FieldNumber_TabId = 3,
  ITMCreateTabResponse_FieldNumber_SessionId = 4,
};

@interface ITMCreateTabResponse : GPBMessage

@property(nonatomic, readwrite) ITMCreateTabResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@property(nonatomic, readwrite, copy, null_resettable) NSString *windowId;
/** Test to see if @c windowId has been set. */
@property(nonatomic, readwrite) BOOL hasWindowId;

@property(nonatomic, readwrite) int32_t tabId;

@property(nonatomic, readwrite) BOOL hasTabId;
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;
/** Test to see if @c sessionId has been set. */
@property(nonatomic, readwrite) BOOL hasSessionId;

@end

#pragma mark - ITMSplitPaneRequest

typedef GPB_ENUM(ITMSplitPaneRequest_FieldNumber) {
  ITMSplitPaneRequest_FieldNumber_Session = 1,
  ITMSplitPaneRequest_FieldNumber_SplitDirection = 2,
  ITMSplitPaneRequest_FieldNumber_Before = 3,
  ITMSplitPaneRequest_FieldNumber_ProfileName = 4,
  ITMSplitPaneRequest_FieldNumber_CustomProfilePropertiesArray = 5,
};

@interface ITMSplitPaneRequest : GPBMessage

/** See documentation on session IDs */
@property(nonatomic, readwrite, copy, null_resettable) NSString *session;
/** Test to see if @c session has been set. */
@property(nonatomic, readwrite) BOOL hasSession;

@property(nonatomic, readwrite) ITMSplitPaneRequest_SplitDirection splitDirection;

@property(nonatomic, readwrite) BOOL hasSplitDirection;
/** If true, new session is above/left of the session being split. Otherwise, it goes below/right. */
@property(nonatomic, readwrite) BOOL before;

@property(nonatomic, readwrite) BOOL hasBefore;
/** Leave unset to use the default profile. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *profileName;
/** Test to see if @c profileName has been set. */
@property(nonatomic, readwrite) BOOL hasProfileName;

/** Modifies the profile to customize its behavior just for this session. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ITMProfileProperty*> *customProfilePropertiesArray;
/** The number of items in @c customProfilePropertiesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger customProfilePropertiesArray_Count;

@end

#pragma mark - ITMSplitPaneResponse

typedef GPB_ENUM(ITMSplitPaneResponse_FieldNumber) {
  ITMSplitPaneResponse_FieldNumber_Status = 1,
  ITMSplitPaneResponse_FieldNumber_SessionIdArray = 2,
};

@interface ITMSplitPaneResponse : GPBMessage

@property(nonatomic, readwrite) ITMSplitPaneResponse_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
/**
 * TODO(gln): this will not be set for tmux integration because the split happens only if/when the
 * tmux server acts on the request.
 * See documentation on session IDs.
 * If more than one session was split, there will be multiple session_id's.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *sessionIdArray;
/** The number of items in @c sessionIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger sessionIdArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
